<?php
$request = Connexions::getRequest();
$baseUrl = $this->baseUrl('/'); //Connexions::url('/');

$this->headMeta()->appendHttpEquiv('Content-Type', 'text/html; charset=utf8');

/*
echo "<pre>Request Params:\n";
print_r($request->getParams());
echo "</pre>\n";
// */

$config         = Zend_Registry::get('config');

$searchTerm     = $request->getParam('q', null);
$searchContext  = $request->getParam('searchContext', 'all');
$searchContexts = $config->searchContext;
if ($searchContexts instanceof Zend_Config)
{
    $searchContexts = $searchContexts->toArray();
}
else
{
    $searchContexts = array();
}


//ZendX_JQuery_View_Helper_JQuery::enableNoConflictMode();

$jQuery = $this->jQuery();

$links = $this->headLink();
$links->prependStylesheet($baseUrl .'css/main.css');

$jQuery->addJavascriptFile($this->baseurl('js/ui.input.js'));

/*

$links->appendStylesheet($baseUrl .'css/screen.css', 'screen,projection');
$links->appendStylesheet($baseUrl .'css/sprites.css','screen,projection');
$links->appendStylesheet($baseUrl .'css/screen.css', 'print');

$links->appendStylesheet($baseUrl .'css/ie.css',     'screen,projection',
                         true, array('conditional'  => 'lt IE 8'));
*/


if ( $config->cdn->use )
{
    /* Use the google CDN.  By default, we will load directly from google.
     * If we want to use the new Google AJAX API Loader, call:
     */
    if ( $config->cdn->use->loader )
    {
        $jQuery->setAjaxApiLoader(true);
    }
}
else
{
    // Use our local jQuery / jQuery.ui
    $jQuery->setLocalPath($baseUrl   .'js/jquery.js')
           ->setUiLocalPath($baseUrl .'js/jquery-ui.js');
}

$jQuery->setVersion('1.4')
       ->setUiVersion('1.7.2')
       ->enable()
       ->uiEnable()
       ->prependOnLoad('search_initHandlers();')
       ->javascriptCaptureStart();
  ?>

/** @brief  Given an argument list of image urls, load them all but don't
 *          display.
 *  @param  arguments   A list of image urls.
 *
 *  Images are store globally in '_imageCache' but are not rendered.
 */
var _imageCache  = [];
function preloadImages()
{
    var args_len    = arguments.length;
    for (var idex = args_len; idex--;)
    {
        var img = document.createElement('img');
        img.src = arguments[idex];
        _imageCache.push(img);
    }
}

// Preload images that we use everywhere.
preloadImages('<?= $baseUrl ?>images/logo.gif',
              '<?= $baseUrl ?>css/sprites/connexions.gif');

/************************************************
 * Initialize the search form handlers
 *
 */
function search_initHandlers()
{
    var $form           = $('#search');
    var $input          = $form.find('input[name=q]');
    var $submit         = $form.find('button:first');
    var $context        = $form.find('input[name=searchContext]');
    var $choices        = $form.find('.choices .list');
    var contextLabel    = $choices.find('li.active').text();

    $submit.addClass('ui-state-disabled')
           .attr('disabled', true);

    // Activate our search choice selections
    $choices.find('li')
        .mousedown(function(event) {
            /* We're changing the empty text so, before 'blur' is fired on the
             * input field, remove the existing empty text.
             *
             * This fixes a flicker issue where the old empty text would be
             * placed in the input field only to be removed when we re-focus on
             * that field.
             */
            $input.input('setEmptyText', null);
        })
        .click(function(event) {
            var $li         = $(this);
            var $choices    = $li.parent().parent();
    
            // Grab the new choice value from the li.id
            var choice  = $li.attr('id').replace(/search-choice-/, '');
            $context.val(choice);
    
            // Now, set the current value in the query input box
            contextLabel = $li.text();

            // Remove the 'active' class from all sibling lis
            $li.siblings('.active').removeClass('active');
    
            // Add the 'active' class to this li
            $li.addClass('active');

            // Set the new empty text and focus on the input field.
            $input.input('setEmptyText', contextLabel)
                  .focus();
    
        });
    
    /* Attach ui.input to the input field with defined 'emptyText' and a
     * validation callback to enable/disable the submit button based upon
     * whether or not there is text in the search box.
     */
    $input.input({
        emptyText:  contextLabel,
        validation: function(val) {
            if (val.length > 0)
            {
                $submit.removeClass('ui-state-disabled')
                       .removeAttr('disabled');
            }
            else
            {
                $submit.addClass('ui-state-disabled')
                       .attr('disabled', true);
            }

            // ALWAYS return true.  There really is no "invalid" search text.
            return true;
        }
    });
}
  <?php
$jQuery->javascriptCaptureEnd();



/***************************************************************************
 * Begin Page Generation
 *
 */

?>
<?= $this->doctype() ?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <?= $this->headMeta() ?>

  <?= $this->headTitle() ?>

  <?= $this->headLink() ?>

  <?= $this->headStyle() ?>

  <?= $this->headScript() ?>

  <?= $this->jQuery() ?>

</head>

<body>
 <div class="page liquid"><!-- { page -->
  <div id="pageHeader" class="head" role="banner"><!-- { head -->
   <h1 id='siteName'>
    <a href="<?= $baseUrl ?>">
     <span>conne</span>
     <img src="<?= $baseUrl ?>images/logo.gif" alt="x" />
     <span>ions</span>
    </a>
   </h1>
   <div class='tabs'><!-- tabs { -->
    <?php
        /* Present the Navigation Menu
         *
         * Note: $this/view->navigation() is initialized in
         *       Bootstrap::_initNavigation
         */
        $nav   = $this->navigation();

        /*
        $acl  = $nav->getAcl();
        $role = $nav->getRole();
        printf("role[ %s ]<br />\n", $role);
echo "<pre>acl:\n";
print_r($acl);
echo "</pre>\n";
        */

        $items = $nav->findOneByLabel('nav_menu');

        echo $this->navigation()
                  ->menu()
                  ->renderPartial($items, 'nav_menu.phtml');

    ?>
   </div><!-- tabs } -->
 
   <!-- br class='clear' / -->
  </div><!-- head } -->
