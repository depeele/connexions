<?php
//$this->headLink()->appendStylesheet($this->baseUrl('css/auth.css'));
//
$this->headTitle('Join');

$jQuery = $this->jQuery();
$jQuery->addStylesheet($this->baseUrl('css/auth.css'))
       /*
       ->addStylesheet($this->baseUrl('css/validationForm.css'))
       ->addJavascriptFile($this->baseUrl('js/ui.button.min.js'))
       ->addJavascriptFile($this->baseUrl('js/ui.input.min.js'))
       */
       ->addOnLoad('authRegister_onLoad();')
       ->javascriptCaptureStart();
?>
/************************************************
 * Initialize the form handlers
 *
 */
function authRegister_onLoad()
{
    var $auth   = $('#auth');
    var $form   = $auth.find('form:first');

    /* Passwords have a custom, synchronous validator that we need to
     * bind BEFORE instantiating the validationForm so we can syncrhonously
     * perform validation as needed.
     */
    var pass1Name   = 'password';
    var pass2Name   = 'password2';
    var $pass1      = $form.find('input[name='+ pass1Name +']');
    var $pass2      = $form.find('input[name='+ pass2Name +']');
    var $status     = $auth.find('.status');

    $form.find('input[name=user]').input({
        validation: function(val) {
            return validate_user($(this), val);
        }
    });

    $form.find('input[name='+ pass1Name +'],'+
               'input[name='+ pass2Name +']').input({
        validation: function() {
            return $.validatePasswords($(this), $pass1, $pass2);
        }
    });

    $form.validationForm({$validation: $status} );
}

function validate_user($user, name)
{
    var stat    = $user.input('isValid');
    /* :XXX: If the stat is currently 'undefined', we will be returned an
     *       object which we need to convert BACK to 'undefined' so we don't
     *       toggle the state (undefined => object) causing the CSS class to be
     *       changed, causing a flicker from undefined to invalid.
     */
    if ((stat !== true) && (stat !== false))
    {
        stat = undefined;
    }

    if (name.length > 2)
    {
        // Perform a JSONP call to see if this user name is in use
        $.getJSON('<?= $this->baseUrl('auth/checkuser') ?>?jsonp=?',
            {format:   'json',
             userName: name},
             function(data) {
                if (data.error !== undefined)
                    $user.input('valid', data.error.message);
                else
                    $user.input('valid', true);
             });
    }

    // Regardless, don't change the current validation.
    return stat;
}
<?php
$jQuery->javascriptCaptureEnd();


?>
<div id="auth" class='ui-validation-form ribbon-form line'><!-- { -->
 <div class='context-ribbon'>&nbsp;</div>
 <div class="legend unit"><!-- { -->
  <h1>Join</h1>
  <p>
   or <?= Connexions::anchor('/auth/signIn', 'Sign In') ?>
  </p>
  <div class='status<?= (@isset($this->error) ? ' error' : '') ?>'>
   <?= (@isset($this->error) ? $this->error : '') ?>
  </div>
 </div><!-- legend } -->
 <div class="userInput lastUnit"><!-- { -->
  <form method='post'>
   <div class='field'>
    <label for='user'>Desired User Name / ID</label>
    <input type='text' class='text required' autocomplete='off'
           name='user' value='<?= $this->user ?>'
                    tabindex='1' />
    <div class='ui-field-info'>
     <div class='ui-field-status'></div>
    </div>
   </div>
   <div class='field'>
    <label for='password'>Password</label>
    <input type='password' class='text required' autocomplete='off'
          name='password'  value='<?= $this->pass ?>'
                        tabindex='2' />
    <div class='ui-field-info'>
     <div class='ui-field-status'></div>
    </div>
   </div>
   <div class='field'>
    <label for='password2'>Re-type Password for verfication</label>
    <input type='password' class='text required' autocomplete='off'
           name='password2'
                        tabindex='3' />
    <div class='ui-field-info'>
     <div class='ui-field-status'></div>
    </div>
   </div>
   <div class='field buttons'>
    <button name='submit' tabindex='4'>Join Connexions</button>
   </div>
  </form>
 </div><!-- userInput } -->
</div><!-- ribbon-form } -->
