<?php
//$this->headLink()->appendStylesheet($this->baseUrl('css/auth.css'));
//
$this->headTitle('Join');

$jQuery = $this->jQuery();
$jQuery->addStylesheet($this->baseUrl('css/auth.css'))
       /*
       ->addStylesheet($this->baseUrl('css/validationForm.css'))
       ->addJavascriptFile($this->baseUrl('js/ui.button.min.js'))
       ->addJavascriptFile($this->baseUrl('js/ui.input.min.js'))
       */
       ->addOnLoad('authRegister_onLoad();')
       ->javascriptCaptureStart();
?>
/************************************************
 * Initialize the form handlers
 *
 */
var $form       = null;
var $submit     = null;
var $status     = null;

function authRegister_onLoad()
{
    $form   = $('#auth form');
    $form.hide();   // hide while we prepare....

    $form.addClass('ui-form');

    $status = $('#auth .status');
    $submit = $('#auth button[name=submit]');

    $submit.button({ priority:'primary', enabled:false});
    $('#auth button[name=cancel]').button({ priority:'secondary'});


    // Passwords have custom synchronous validator
    var pass1Name   = 'password';
    var pass2Name   = 'password2';
    var $pass1      = $('#auth input[name='+ pass1Name +']');
    var $pass2      = $('#auth input[name='+ pass2Name +']');

    $('#auth input[name='+ pass1Name +'],'+
      '#auth input[name='+ pass2Name +']').input({
        validation: function(val) {
            return validate_passwords($(this), $pass1, $pass2);
        }
    });

    /* User name has a custom, asynchrounous validator -- we do this separately
     * since this is an asynchrounous call
     */
    $('#auth input[name=user]').input({ validation: validate_user });

    // Bind to the 'validation_change' event for all inputs.
    $('#auth input[type=text],#auth input[type=password],textarea')
         .input()
         .bind('validation_change', function() { validate_form(); });

    $('#auth input[name=user]')
            .bind('validation_change', function() {
             });

    $form.show();
}

function validate_user(name)
{
    var $user   = $(this);
    if (name.length > 2)
    {
        // Perform a JSONP call to see if this user name is in use
        $.getJSON('<?= $this->baseUrl('auth/checkuser') ?>?jsonp=?',
            {format:   'json',
             userName: name},
             function(data) {
                if (data.error !== undefined)
                    $user.input('valid', data.error.message);
                else
                    $user.input('valid', true);

                validate_form();
             });
    }

    // Regardless, don't change the current validation.
    return $user.input('getValidationState');
}

function validate_passwords($el, $pass1, $pass2)
{
    var pass1       = $pass1.val();
    var pass2       = $pass2.val();
    var res         = true;

    if ((pass1.length < 1) || (pass2.length < 1))
    {
        // Neither valid nor ivnalid
        res = undefined;

        // Also clear the validation status for the other field
        if ($el[0] === $pass1[0])
            $pass2.input('setValidationState', undefined);
        else
            $pass1.input('setValidationState', undefined);
    }
    else if (pass1 !== pass2)
    {
        // Invalid -- with message
        res = 'Passwords do not match.';

        // Only report errors on 'password2'
        if ($el[0] === $pass1[0])
        {
            $pass2.input('setValidationState', res);
            res = undefined;
        }
        else
        {
            /* But we still  want to clear the validation status for
             * password1
             */
            $pass1.input('setValidationState', undefined);
        }
    }
    else
    {
        // Also report success for the other field.
        if ($el[0] === $pass1[0])
            $pass2.input('setValidationState', true);
        else
            $pass1.input('setValidationState', true);

        //validate_form();
    }

    return res;
}

function validate_form()
{
    var $required   = $('.required');
    var isValid     = true;

    $required.each(function() {
        if (! $(this).hasClass('ui-state-valid'))
        {
            isValid = false;
            return false;
        }
    });

    if (isValid)
    {
        $submit.button('enable');
        $status.removeClass('error')
               .addClass('success')
               .text('');
    }
    else
    {
        $submit.button('disable');
        $status.removeClass('success')
               .addClass('error');
    }
}

<?php
$jQuery->javascriptCaptureEnd();


?>
<div class="line"><!-- { -->
 <div id="auth" class='ui-validation-form'>
  <div class='context-ribbon'>&nbsp;</div>
  <div class="legend unit"><!-- { -->
   <h1>Join</h1>
   <p>
    or <?= Connexions::anchor('/auth/signIn', 'Sign In') ?>
   </p>
   <div class='status<?= (@isset($this->error) ? ' error' : '') ?>'>
    <?= (@isset($this->error) ? $this->error : '') ?>
   </div>
  </div><!-- legend } -->
  <div class="userInput unit"><!-- { -->
   <form method='post'>
    <div class='field'>
     <label for='user'>Desired User Name / ID</label>
     <input type='text' class='text required' autocomplete='off'
            name='user' value='<?= $this->user ?>'
                     tabindex='1' />
     <div class='ui-field-info'>
      <div class='ui-field-status'></div>
     </div>
    </div>
    <div class='field'>
     <label for='password'>Password</label>
     <input type='password' class='text required' autocomplete='off'
           name='password'  value='<?= $this->pass ?>'
                         tabindex='2' />
     <div class='ui-field-info'>
      <div class='ui-field-status'></div>
     </div>
    </div>
    <div class='field'>
     <label for='password2'>Re-type Password for verfication</label>
     <input type='password' class='text required' autocomplete='off'
            name='password2'
                         tabindex='3' />
     <div class='ui-field-info'>
      <div class='ui-field-status'></div>
     </div>
    </div>
    <div class='field buttons'>
     <button name='submit' tabindex='4'>Join Connexions</button>
    </div>
   </form>
  </div><!-- userInput } -->
 </div>
</div><!-- line } -->
