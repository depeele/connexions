<?php
/** @file
 *
 *  View script for IndexController::index with incoming members:
 *      viewer      The Model_User instance representing the current viewer;
 *      owner       The owner of the current item set -- either a string or a
 *                  Model_User instance;
 *      reqTags     The set of tags originally specified in the URL.
 *      reqTagInfo  Null if no tags or an array tagId information
 *                  (from Model_Tag::ids()) that identifies both valid and
 *                  invalid tags;
 *      userItems   The Model_UserItemSet representing the items to present.
 *      paginator   The paginator to use in presenting 'userItems'.
 */

if ($this->owner !== '*')
    $this->headTitle($this->owner ."'s Bookmarks");
else
    $this->headTitle('Bookmarks')

?>
<p>Present the Bookmarks for <?= $this->owner ?>
                         to  <?= $this->viewer ?>
<?php   if ( (! @is_array($this->reqTagInfo)) ||
              @empty($this->reqTagInfo['valid']) )
            printf (", NO tags.");
        else
            printf (" with tags '%s'",
                    implode(', ', array_keys($this->reqTagInfo['valid'])) );
?>
</p>

<?php
if ( @isset($this->userItems) )
{
    /* If $this->tagSet is NOT set and we have 1 or more userItems, make use of
     * the 'userItems' Model_UserItemSet instance to retrieve the tags for
     * these userItems (specifically, for the unique items and unique users
     * represented by these userItems).
     */
    if ((! @isset($this->tagSet)) && (count($this->userItems) > 0))
    {
        /* Note: We COULD modify Model_TagSet to hold the 'reqTags', and
         *       'reqTagInfo' and then allow the tagCloud.phtml partial to just
         *       deal with an incoming Model_TagSet, relying on
         *       Model_TagSet::get_Tag_ItemList() to reference the held
         *       context.
         */
        $this->tagSet = new Model_TagSet( $this->userItems->userIds(),
                                          $this->userItems->itemIds() );
    }
}

if ( @isset($this->tagSet))
{
    // The partial is faster than the  View Helper by about 0.01 seconds
    $time_start = microtime(true);
    if (false)
    {
    /* Use the Connexions_View_Helper_HtmlTagCloud class to render the tag
     * cloud for $this->tagSet.
     */
    $this->layout()->right = $this->htmlTagCloud();

    }
    else
    {
    /* Use the tagCloud.phtml partial to render the tag cloud associated with
     * the incoming userItems.
     */
    $this->layout()->right = $this->partial('tagCloud.phtml',
                                            array(
                                                'tags'      => &$this->tagSet,
                                                'reqTagInfo'=>
                                                        $this->reqTagInfo,
                                                'reqTags'   => $this->reqTags,
                                                'maxTags'   => 50
                                            ));
    }

    $time_end   = microtime(true);
    $this->layout()->right .= sprintf ("%f seconds to render tag cloud<br />\n",
                                       $time_end - $time_start);
}

/* Present the pagination control, established by
 * Bootstrap.php::_initViewGlobal() to be rendered via:
 *      views/scripts/paginationControl.phtml
 */
echo $this->paginator;

if (count($this->paginator))
{
    // Present the items of the current page
    echo "<ul class='items'>\n";
    foreach ($this->paginator as $idex => $userItem)
    {
        /* Present the current item -- This should probably be via a view
         * partial like:
         *      view/scripts/userItem.phtml
         */
        //$userItem = new Model_UserItem($item);
        echo $this->partial('userItem.phtml',
                            array(
                                'index'    => $idex,
                                'userItem' => &$userItem
                            ));
    }
    echo "</ul>\n";
}

echo $this->paginator;

?>


<div class='error'><?= (@isset($this->error) ? $this->error : '') ?></div>
