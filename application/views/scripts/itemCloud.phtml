<?php
/** @file
 *
 *  HTML rendering of an Item Cloud (may actually present a list).
 *
 *  Incoming parameters:
 *      helper          The View_Helper_HtmlItemScope instance;
 *
 *
 *  The 'helper' provides access to the following:
 *      namespace       The form namespace for this paginator;
 *      perPageChoices  The set of valid per-page values;
 *      itemType        The type of item
 *                      (View_Helper_HtmlItemCloud::ITEM_TYPE_ITEM |
 *                                                  ITEM_TYPE_USER);
 *
 *      displayStyle    The type of display
 *                      (View_Helper_HtmlItemCloud::STYLE_CLOUD |
 *                                                  STYLE_LIST);
 *
 *      showRelation    Should a "cloudRelation" indicator be rendered;
 *      paginator       If provided, render a pagination control top and
 *                      bottom;
 *
 *      items           A Connexions_Model_Set instance representing the set of
 *                      items to be presented;
 *      selected        A Connexions_Model_Set instance representing the set of
 *                      items that are currently selected (null if none are
 *                      selected);
 *      itemBaseUrl     The base URL to use for item completion;
 *      weightName      The name of the field/member to use for weight;
 *
 */
$helper       = $this->helper;
$namespace    = $helper->namespace;
$displayStyle = $helper->getDisplayStyle(); //displayStyle;
$itemType     = $helper->itemType;
$paginator    = $helper->paginator;

printf ("<!-- displayStyle [ %s ] -->\n", $displayStyle);

$itemList = new Connexions_Model_Set_Adapter_ItemList(
                        $helper->items,
                        $helper->selected,
                        $helper->itemBaseUrl,
                        $helper->weightName);

if ($helper->hasHiddenItems())
{
    // Remove any items that were identified as "hidden"
    foreach ($itemList as $key => $item)
    {
        if ($helper->isHidden($item))
        {
            unset($itemList[$key]);
        }
    }
}

?>
<div    id='<?= $namespace ?>Cloud'
     class='<?= $itemType ?>Items pane'>
 <?php

    if ($helper->showRelation)
    {
 ?><div class='cloudRelation connexions_sprites relation_ltr'>&nbsp;</div><?php
    }

    $uiPagination = null;
    if ($paginator instanceof Zend_Paginator)
    {
        $uiPagination = $this->htmlPaginationControl();
        $uiPagination->setNamespace($namespace);
        $uiPagination->setPerPageChoices($helper->perPageChoices);

        echo $uiPagination->render($paginator, 'paginator-top', true);
    }

 ?>
 <?= $helper->renderDisplayOptions() ?>
 <div class='cloud'><?php   // cloud {

    if (count($itemList) < 1)
    {
        echo 'No matching items.';
    }
    else
    {
        $sortedList = $helper->sortItemList($itemList);

        if ($displayStyle === View_Helper_HtmlItemCloud::STYLE_CLOUD)
        {
            // Render a cloud (Zend_Tag_Cloud)
            $cloudConfig = array(
                'ItemList'              => $sortedList,

                // Setup the cloud decoarator
                'CloudDecorator'        => array(
                    'decorator'         => 'htmlCloud',
                    'options'           => array(
                        'HtmlTags'      => array(
                            'ul'        => array(
                                'class' => 'Item_Cloud',
                            ),
                        ),
                    ),
                ),

                // Setup the tag decorator
                'TagDecorator'          => array(
                    'decorator'         => 'htmlItemCloudItem',
                    'options'           => array(
                        'HtmlTags'      => array(
                            'li'        => array(
                                'class' => 'cloudItem',
                            ),
                        ),
                        'ClassList'     => array(
                            'size0', 'size1', 'size2', 'size3',
                            'size4', 'size5', 'size6',
                        ),
                    ),
                ),

                // Make helpers in 'application/view/helpers' available
                'prefixPath'            => array(
                    'prefix'            => 'View_Helper',
                    'path'              => APPLICATION_PATH .'/views/helpers/',
                ),
            );

            if ($itemType === View_Helper_HtmlItemCloud::ITEM_TYPE_USER)
            {
                $cloudConfig['TagDecorator']
                                ['options']
                                    ['HtmlTags']
                                        ['li']
                                            ['class']   .= ' user';
            }

            $cloud = new Zend_Tag_Cloud( $cloudConfig );

            if ($helper->highlightCount > 0)
            {
                /* (Re)sort the item list by descending weight and then
                 * invoke the 'highlights.phtml' partial passing in the
                 * newly sorted list and highlightCount.
                 */
                $hlList = $helper->sortItemList(
                                        $itemList,
                                        'weight',
                                        Connexions_Service::SORT_DIR_DESC);

                echo $this->partial('highlights.phtml',
                                    array('itemList'       => $hlList,
                                          'highlightCount' =>
                                             $helper->highlightCount,
                                   ));
            }

            echo $cloud->render();
        }
        else
        {
            // Render a list

            // /*
            echo $this->partial('itemList.phtml',
                                array('itemList'    => $sortedList,
                                      'weightName'  => $helper->weightName,
                                      'weightTitle' => $helper->weightTitle,
                                      'titleName'   => $helper->titleName,
                                      'titleTitle'  => $helper->titleTitle,
                                      'itemType'    => $helper->itemType,
                               ));
            // */

            /*
            echo $helper->renderList( $sortedList );
            // */
        }
    }

 ?>
 </div><?php                // cloud }

    if ($uiPagination !== null)
    {
        echo $uiPagination->render($paginator);
    }

 ?>
</div>
