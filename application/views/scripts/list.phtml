<?php
/** @file
 *
 *  HTML rendering of a list of items
 *      (typically via View_Helper_List sub-class).
 *
 *  Incoming parameters:
 *      helper          The View_Helper_List instance that initiated this view
 *                      script.  It provides additional parameters (e.g.
 *                      namespace, perPageChoices, viewer, paginator, sortBy)
 *                      as well as group value parsing and rendering of display
 *                      options and group headers;
 */
$helper     =& $this->helper;

/*
Connexions::log("view/scripts/list.phtml: "
                . "namespace[ %s ], sortBy[ %s ], sortOrder[ %s ]\n",
                $helper->namespace, $helper->sortBy, $helper->sortOrder);
// */


$namespace  = $helper->namespace;
$paginator  = $helper->paginator;


$uiPagination = null;
if ($paginator instanceof Zend_Paginator)
{
    $pagerConfig = array(
        'namespace'      => $namespace,
        'perPageChoices' => $helper->perPageChoices,
        'paginator'      => $paginator,
    );
    $uiPagination = $this->htmlPaginationControl( $pagerConfig );
}

// Holder for any additional HTML to be included
$html = $helper->html;

$id = $namespace .'List';
?>
<div id='<?= $id ?>' class='pane'>
 <?= (is_array($html) && isset($html['prepend'])
         ? $html['prepend']
         : '') ?>
 <?= ($uiPagination !== null
         ? $uiPagination->render('paginator-top', true)
         : '') ?>
 <?= ($paginator !== null
         ? $helper->renderDisplayOptions($paginator)
         : '') ?>
 <ul class='items <?= $helper->ulCss ?>'>
 <?php
if ($paginator !== null)
{
    /* Group by the field identified as the primary sort field.
     *
     * This grouping MAY be a "special field", indicated by the presense of onr
     * or more ':' characters (see Model_Mapper_Base::_getSpecialFields()).
     *
     * If so, we ASSUME that the final field has been promoted to a
     * pseudo-field.
     */
    $lastGroup  = null;
    $groupBy    = explode(':', $helper->sortBy);
    $groupByCnt = count($groupBy);
    $groupByLst = $groupBy[ $groupByCnt - 1];

    foreach ($paginator as $idex => $item)
    {
        if ($item === null)
        {
            /* Paginator items that aren't available (i.e. beyond the end of
             * the paginated set) are returned as null so treat the first null
             * item as end-of-set.
             */
            break;
        }

        // Retrieve the value of the grouping field
        $groupVal = $item->{$groupByLst};
        $newGroup = $helper->groupValue($groupVal); //, $helper->sortBy);
        if ($newGroup !== $lastGroup)
        {
            echo $helper->renderGroupHeader($newGroup); //, $helper->sortBy);
            $lastGroup = $newGroup;
        }

        echo $helper->renderItem($item);
    }
}

 ?>
 </ul>
 <?= ($uiPagination !== null
         ? $uiPagination->render()
         : '') ?>
 <br class='clear' />
 <?= (is_array($html) && isset($html['append'])
         ? $html['append']
         : '') ?>
</div>
<?php

/* Establish configuration for and schedule instantiation of a new
 * Javascript connexions.itemPane() instance targeting the 'pane' div rendered
 * just below.
 */
$paneConfig = array(
    'namespace'      => $namespace,
    'partial'        => $helper->panePartial,
    'hiddenVars'     => $helper->paneVars,
    'displayOptions' => $helper->getDisplayOptionsConfig(),
    'itemList'       => $helper->getItemListConfig(),
);
$paneConfig = Zend_Json::encode($paneConfig);

$jsWait = false;
$jsLoad = "$('#{$id}').itemsPane({$paneConfig});";
if ($jsWait === false)
{
    // Instantiate the Javascript widget immediately
    ?>
<script type='text/javascript'>
(function($) {
    <?= $jsLoad ?>
 }(jQuery));
</script>
    <?php
}
else
{
    // Wait until DOM-ready to instantiate the Javascript widget
    $this->jQuery()->addOnLoad( $jsLoad );
}
