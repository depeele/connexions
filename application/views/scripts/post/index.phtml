<?php
if (! @is_array($this->postInfo))
    $this->postInfo = array();

//$this->headLink()->appendStylesheet($this->baseUrl('css/post.css'));
$jQuery = $this->jQuery();
$jQuery->addStylesheet($this->baseUrl('css/post.css'));
$jQuery->addJavascriptFile($this->baseurl('js/ui.stars.js'));

//$noConflict = Zend_JQuery_View_Helper_JQuery::getJQueryHandler();

$jQuery->addOnLoad('post_initHandlers();');

$jQuery->javascriptCaptureStart();
?>

/************************************************
 * Initialize the post form handlers
 *
 */
var $submit     = null;
var $error      = null;
var $tags       = null;
var keyTimer    = null;

function post_initHandlers()
{
    $tags     = $('input[name=tags]');
    $submit   = $('input[type=submit]');
    $error    = $('.formError');

    validation_failure();

    // Handle autocomplete / validation of the tags
    $tags.keyup(function() { tags_keyup(); })
         .blur(function() {  tags_blur(); });

    // Rating
    $('.stars-wrapper').stars({
        captionEl:          $('label[for=rating]'),
        baseClass:          'connexions_sprites',

        cancelClass:        'star_0',
        cancelHoverClass:   'star_0_hover',
        cancelDisabledClass:'star_0_off',

        starClass:          'star_1',
        starOnClass:        'star_1_on',
        starHoverClass:     'star_1_hover',
        starDisabledClass:  'star_1_off'
    });
    /*
    $('input[name=rating]').rating({
        css_cancel:     'connexions_sprites star_0_off',
        css_cancelHover:'star_0_hover',

        css_star:       'connexions_sprites star_1_off',
        css_starOn:     'star_1_on',
        css_starHover:  'star_1_hover',
        css_starOff:    'star_1_off'
    });
    // */

    /*
    // Favorite
    $('input[name=isFavorite]').Checkbox({
            css:        'connexions_sprites',
            cssOn:      'star_fill',
            cssOff:     'star_empty',
            titleOn:    'Favorite: click to remove from Favorites',
            titleOff:   'Click to add to Favorites',
            useElTitle: false,
            hideLabel:  true
    });

    // Privacy
    $('input[name=isPrivate]').Checkbox({
            css:        'connexions_sprites',
            cssOn:      'lock_fill',
            cssOff:     'lock_empty',
            titleOn:    'Private: click to share',
            titleOff:   'Public: click to mark as private',
            useElTitle: false,
            hideLabel:  true
    });
    // */
}

/************************************************
 * Validation presentation
 *
 */
function validation_failure($src, errorMsg)
{
    $submit.attr('disabled', 'true')
           .addClass('disabled');

    if ($src !== undefined)
    {
        var $status = $src.parent().find('.validationStatus');

        $src.removeClass('ok')
            .addClass('error');
        $status.removeClass('ok error');

        if (errorMsg !== undefined)
        {
            $status.addClass('error')
                   .text(errorMsg);
            errorMsg = undefined;
        }
    }

    if (errorMsg !== undefined)
    {
        $error.text(errorMsg);
    }
}

function validation_success($src)
{
    var $status     = $src.parent().find('.validationStatus');
    var $required   = $('.required');

    $src.removeClass('error')
        .addClass('ok');
    $status.removeClass('error')
           .addClass('ok')
           .text('');

    if ($required.hasClass('ok'))
    {
        $submit.removeAttr('disabled')
               .removeClass('disabled');
        $error.text('');
    }

    if ($required.hasClass('error'))
    {
        $submit.attr('disabled', 'true')
               .addClass('disabled');
    }
}

/************************************************
 * Validation routines
 *
 */
function tags_validate()
{
    validation_success($tags);
}

function nonEmpty_validate()
{
    $('.nonEmpty').each(function() {
        var $el = $(this);
        if ($el.val().length > 0)
        {
            validation_success($el);
        }
        else
        {
            validation_failure($el);
        }
    });
}

/************************************************
 * Input handlers
 *
 */
function tags_keyup()
{
    $tags.removeClass('error ok');
    validation_failure();
    if (keyTimer !== null)
        clearTimeout(keyTimer);

    keyTimer = setTimeout(function() { tags_validate(); }, 1000);
}

function tags_blur()
{
    if ($tags.hasClass('ok'))
        return;

    tags_validate();
}

function toggle_image_button(event, el, base)
{
    var $el = $(el);
    event.preventDefault();
    event.stopPropagation();

    if ($el.hasClass(base +'_fill'))
    {
        $el.removeAttr('checked')
           .removeClass(base +'_fill')
           .addClass(base +'_empty');
    }
    else
    {
        $el.attr('checked', true)
           .removeClass(base +'_empty')
           .addClass(base +'_fill');
    }
}

<?php
$jQuery->javascriptCaptureEnd();


?>
<div id="post">
 <div class="line"><!-- { -->
  <div class="legend unit"><!-- { -->
   <h1>Post</h1>
   <p>
    a new bookmark:
   </p>
  </div><!-- legend } -->
  <div class="userInput unit"><!-- { -->
   <form method='post'>
    <div class='field required'>
     <div class='validationStatus'></div>
     <label for='name'>Name</label>
     <input type='text' class='text nonEmpty' autocomplete='off'
            name='name' value='<?= $this->postInfo['name'] ?>' />
    </div>
    <div class='field required'>
     <div class='validationStatus'></div>
     <label for='url'>URL</label>
     <input type='text' class='text nonEmpty' autocomplete='off'
           name='url' value='<?= $this->postInfo['url'] ?>' />
    </div>
    <div class='field'>
     <label for='description'>Description</label>
     <textarea class='text'
            name='description'><?= $this->postInfo['description'] ?></textarea>
    </div>
    <div class='field required'>
     <div class='validationStatus'></div>
     <label for='tags'>Tags</label>
     <input type='text' class='text nonEmpty' autocomplete='off'
            name='tags' value='<?= $this->postInfo['tags'] ?>' />
    </div>
    <div class='personalize buttons clearfix'>
     <div class='field userRating'>
      <label for='rating'>rating</label>
      <div class='stars-wrapper'>
       <input name='rating' type='radio' value='1' title='Terrible'
             <?= ($this->postInfo['rating'] == '1'
                     ? " checked='true'" : '') ?> />
       <input name='rating' type='radio' value='2' title='Fair'
             <?= ($this->postInfo['rating'] == '2'
                     ? " checked='true'" : '') ?> />
       <input name='rating' type='radio' value='3' title='Average'
             <?= ($this->postInfo['rating'] == '3'
                     ? " checked='true'" : '') ?> />
       <input name='rating' type='radio' value='4' title='Good'
             <?= ($this->postInfo['rating'] == '4'
                     ? " checked='true'" : '') ?> />
       <input name='rating' type='radio' value='5' title='Excellent'
             <?= ($this->postInfo['rating'] == '5'
                     ? " checked='true'" : '') ?> />
      </div>
     </div>

     <div class='field favorite'>
      <label for='isFavorite'>Favorite</label>
      <input name='isFavorite'
            type='checkbox' value='true'
            <?= ($this->postInfo['isFavorite'] ? ' checked' : '') ?> />
     </div>

     <div class='field private'>
      <label for='isPrivate'>Private</label>
      <input name='isPrivate'
            type='checkbox' value='true'
            <?= ($this->postInfo['isPrivate'] ? ' checked' : '') ?> />
     </div>
     <input name='submit' type='submit' class='button' value='Save' />
     <input name='cancel' type='submit' class='button' value='Cancel' />
    </div>
   </form>
   <div id='tags'>
     Tag selection area.
   </div>
 
   <div class='formError'>
    <?= (@isset($this->error) ? $this->error : '') ?>
   </div>
  </div><!-- userInput } -->
 </div><!-- line } -->
</div>
