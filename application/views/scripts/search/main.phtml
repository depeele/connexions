<?php
/** @file
 *
 *  If search results are available, present them, otherwise, present a search
 *  form.
 *
 *  Incoming members:
 *      baseUrl         The base url for the main controller of this page
 *                      without any differentiating parameters
 *                      (e.g. tag restrictions);
 *      url             The full url for the main controller of this page
 *                      with differentiating parameters;
 *      viewer          The Model_User instance representing the current
 *                      viewer;
 *
 *      referer         The URL of the referring page
 *                      (used primarily for 'Search this view');
 *      context         The chosen search context;
 *      terms           The provided search terms / query;
 *      results         The search results/configuration for:
 *                          bookmarks
 *                          tags
 *                          people
 *                          items
 */


$nResults = @count($this->results);

?>
<div id='searchResults' class='results'>
 <ul>
<?php

if ($nResults > 0)
{
    $async    = true;
    $paneHtml = '';

    $jQuery = $this->jQuery();
    $jQuery->addOnLoad("searchResults_onLoad();")
           ->javascriptCaptureStart();
?>
/************************************************
 * Initialize the search Results as tabs
 *
 */
function searchResults_onLoad()
{
    var $el     = $('#searchResults');
    var $tab    = null;
    $el.tabs({
        cache:  true,
        cookie: 'search',
        ajaxOptions: {
            beforeSend: function() {
                // Mask the tab panel area...
                var sel = $el.tabs('option', 'selected');
                $tab = $el.find('.ui-tabs-panel').eq(sel);

                $tab.mask();
            },
            complete: function() {
                // Unmask the tab panel area...
                $tab.unmask();
            }
        }
    });
}
<?php
    $jQuery->javascriptCaptureEnd();

    if ($async === true)
    {
        // Load all stylesheets that MAY be used
        /*
        $this->headLink()
                ->appendStylesheet($this->baseUrl('/css/bookmarks.css'))
                ->appendStylesheet($this->baseUrl('/css/tagCloud.css'))
                ->appendStylesheet($this->baseUrl('/css/users.css'));
        // */
    }

    foreach ($this->results as $section => $sectionConfig)
    {
        /*
        printf ("<p>%s %s results matching '%s'.</p>",
                number_format(count($items)),
                preg_replace('/s$/', '', $section),
                $this->terms);
        */
        if ($async === true)
        {
            $paneUrl = $this->view->url .'?format=partial';

            if (is_array($sectionConfig['paneVars']))
            {
                foreach ($sectionConfig['paneVars'] as $name => $val)
                {
                    $paneUrl .= "&{$name}={$val}";
                }
            }
            $paneUrl .= '&part=main-';
        }
        else
        {
            $paneUrl = '#main-';
        }

        ?>
  <li><a href='<?= $paneUrl . $section ?>'><span><?= ucfirst($section) ?></span></a></li><?php

        /*
        switch ($section)
        {
        case 'bookmarks':
            $itemHelper = $this->htmlBookmarks($sectionConfig);

            $scopePath     = array('Bookmarks' => $this->baseUrl('/bookmarks'));
            $htmlItemScope = $this->htmlItemScope( array(
                                'namespace' => $sectionConfig->namespace,
                                'items'     => $itemHelper->paginator,
                                'hideInput' => true,
                                'path'      => $scopePath,
                             ));
            echo $htmlItemScope->render();
            break;

        case 'tags':
            $itemHelper = $this->htmlItemCloud($sectionConfig);

            $scopePath     = array('Tags' => $this->baseUrl('/tags'));
            $htmlItemScope = $this->htmlItemScope( array(
                                'namespace' => $sectionConfig->namespace,
                                'items'     => $itemHelper->paginator,
                                'hideInput' => true,
                                'path'      => $scopePath,
                             ));
            echo $htmlItemScope->render();
            break;

        case 'people':
            $itemHelper = $this->htmlUsers($sectionConfig);

            $scopePath     = array('People' => $this->baseUrl('/people'));
            $htmlItemScope = $this->htmlItemScope( array(
                                'namespace' => $sectionConfig->namespace,
                                'items'     => $itemHelper->paginator,
                                'hideInput' => true,
                                'path'      => $scopePath,
                             ));
            echo $htmlItemScope->render();
            break;

        case 'items':
            $itemHelper = $this->htmlItemCloud($sectionConfig);

            $scopePath     = array('Url' => $this->baseUrl('/url'));
            $htmlItemScope = $this->htmlItemScope( array(
                                'namespace' => $sectionConfig->namespace,
                                'items'     => $itemHelper->paginator,
                                'hideInput' => true,
                                'path'      => $scopePath,
                             ));
            echo $htmlItemScope->render();
            break;

        }
        // */

        if ($async !== true)
        {
            $script   = "search/main-{$section}.phtml";

            $paneHtml .= "<div id='main-{$section}'>"
                      .    $this->render($script)
                      .  "</div>";
        }
    }
}

?>
 </ul>
 <?= $paneHtml ?>
</div>
