<?php
/** @file
 *
 *  A view partial to render the top-level navigation menu.
 *
 *  $this implements the Zend_View_Interface and has at least the following
 *  members/methods:
 *      navigation()    Returns the Zend_View_Helper_Navigtion instance to be
 *                      used to retrieve the Zend_View_Helper_Navigation_Menu
 *                      instance to aid in rendering
 *                      (initialized in Bootstrap::_initNavigation());
 */

/* Initialize our navigation menu related view variables -- the ones that will
 * only be needed here.
 */
$this->initNavMenu();

Connexions::log("layouts/nav_menu.phtml: inbox[ %s ]",
                Connexions::varExport($this->inbox));

/************************************************************
 * Render the Navigation Menu
 *
 */
$nav       = $this->navigation();
$menu      = $nav->menu();

$uri       = Connexions::getRequestUri();
$iterator  = new RecursiveIteratorIterator($nav->getContainer(),
                    RecursiveIteratorIterator::SELF_FIRST);

/* Attempt to simplify the current request uri by stripping off any query
 * and/or fragment.
 */
$uri =  preg_replace('/[\?#].*$/', '', $uri);

/* First, iterate through and determine the lowest page that matches the
 * current URI.
 */
foreach ($iterator as $page)
{
    if (! $menu->accept($page))
    {
        // NOT accepted by ACL or visibility
        continue;
    }

    $href = $page->getHref();

    $isActive = preg_match('#^'.$href.'#', $uri);
    if ($isActive)
    {
        $page->setActive(true);
    }
}
$iterator->rewind();

$authenticated = ( ($this->viewer instanceof Model_User) &&
                    $this->viewer->isAuthenticated() );
$inboxUrl      = '/inbox/'. $viewer->name;
$prevDepth     = -1;
$liFirst       = false;
$ulClass       = 'nav';
foreach ($iterator as $page)
{
    if (! $menu->accept($page))
    {
        // NOT accepted by ACL or visibility
        continue;
    }

    $depth    = $iterator->getDepth();
    $indent   = str_repeat(' ', $depth);
    $href     = $page->getHref();
    $isActive = ($depth > 0
                    ? preg_match('#^'.$href.'#', $uri)
                    : $page->isActive(true));

    if ($depth > $prevDepth)
    {
        // Start a new <ul>
        $ulClasses = array();
        if ( ($depth == 0) && (! @empty($ulClass)))
            array_push($ulClasses, $ulClass);
        else if ($depth > 0)
            array_push($ulClasses, 'sub');
        if ($isActive)
            array_push($ulClasses, 'active');

        echo $indent, '<ul',
                    (! @empty($ulClasses)
                        ? " class='". implode(' ', $ulClasses) ."'"
                        : ""),
                      ">\n";
        $liFirst = true;
    }
    else if ($depth < $prevDepth)
    {
        // Close li/ul tags until we're at current depth
        closeTags($indent, $prevDepth, $depth);
    }

    if ($depth <= $prevDepth)
    {
        // Close the previous <li>
        echo $indent, " </li>\n";
    }

    // Render the <li> for this page
    $liClasses = array();
    if ( $liFirst )
        array_push($liClasses, 'first');
    if ($isActive)
        array_push($liClasses, 'active');
    if ( ($pageClass = $page->getClass()) !== null)
        array_push($liClasses, $pageClass);

    printf ("%s <li%s>",
            $indent,
            (! @empty($liClasses)
                ? " class='". implode(' ', $liClasses) ."'"
                : ""));
    if (($depth > 0) && $liFirst)
    {
        // Include the left inner corner
        echo "<div class='connexions_sprites corner_inner_left'>",
             "</div>";
    }

    $label = Connexions::replaceables($page->getLabel());
    printf ("<a href='%s'>%s</a>",
            $href, $label);

    if ($authenticated)
    {
        /* If the current user is authenticated, we will present an 'inbox'
         * with unread count in several places:
         *      - the 'welcome' are on the far left;
         *      - the 'inbox' sub-menu item;
         */
        $target = $page->getTarget();

        if (strpos($pageClass, 'welcome') !== false)
        {
            $envClass = ($this->inbox['unread'] > 0
                            ? 'envelope'
                            : 'envelope_dim');

            echo "<div class='inbox-indicator connexions_sprites ",
                                $envClass, "'>",
                  "&nbsp;",
                 "</div>";
        }

        if (strpos($href, $inboxUrl) !== false)
        {
            echo "<div class='inbox-indicator ui-state-default'>",
                //"<div class='ui-icon ui-icon-mail-closed'>",
                // "&nbsp;",
                //"</div>",
                  "<span class='count'>";

            if ($this->inbox['unread'] > 0)
            {
                printf ("%d new", $this->inbox['unread']);
            }
            else
            {
                echo "&nbsp;";
            }

            echo  "</span>",
                 "</div>";
        }
    }

    if (($depth > 0) && $liFirst)
    {
        // Include the right inner corner
        echo "<div class='connexions_sprites corner_inner_right'>",
             "</div>";
    }

    $liFirst = false;

    echo "\n";

    $prevDepth = $depth;
}

// Finished iterating -- close all open li/ul tags
closeTags($indent, $depth+1);


/************************************************************
 * Render the Search Control
 *
 */
$searchTerm     = (isset($this->search['term'])
                    ? $this->search['term']
                    : null);
$searchContext  = (isset($this->search['context'])
                    ? $this->search['context']
                    : null);

?>
<form id='search' action='<?= $this->baseUrl('/search') ?>' method='post'
      class='ui-form'>
 <div class='searchBox'><!-- searchBox { -->
  <div class='searchInput'><!-- searchInput { -->
   <div class='choices'>
    <input name='searchContext' type='hidden'
          value='<?= $searchContext ?>' />
    <ul class='sub list'>
     <?php
        /* Render the list of available search contexts.
         *
         * This is defined in 'application/configs/application.ini' via
         *     'searchContext.<name> = <label>
         */
        $contextText = 'Search connexions';
        $ind         = "     ";
        $nItems      = count($this->search['contexts']);
        $idex        = 0;
        foreach($this->search['contexts'] as $name => $label)
        {
            $id        = 'search-choice-'. $name;
            $liClasses = array();
            if ( $idex == 0 )
                array_push($liClasses, 'first');
            else if ( ($idex + 1) >= $nItems)
                array_push($liClasses, 'last');
            if ($searchContext == $name)
            {
                //array_push($liClasses, 'on');
                array_push($liClasses, 'active');
                $contextText = $label;
            }

            printf ("%s<li id='%s'%s>",
                    $ind, $id,
                    (! @empty($liClasses)
                        ? " class='". implode(' ', $liClasses) ."'"
                        : ""));
            if ($idex == 0)
            {
                // Include the left inner corner
                echo "<div class='connexions_sprites corner_inner_left'>",
                     "</div>";
            }

            $label = Connexions::replaceables($label);
            printf ("<a>%s</a>", $label);
            /*
            printf ("<span>%s</span>",
                    $label);
            */

            if ($idex == 0)
            {
                // Include the right inner corner
                echo "<div class='connexions_sprites corner_inner_right'>",
                     "</div>";
            }
            echo "</li>\n";
            $idex++;
        }
     ?>
    </ul>
   </div>
   <label  for='q'></label>
   <input name='q'       type='text' class='input'
          autocomplete='off' maxlength='255' size='30' />
  </div><!-- searchInput } -->
  <button class='submit connexions_sprites magnifier_small'>&nbsp;</button>
 </div><!-- searchBox } -->
</form>

<?php

/** @brief  Given a previous depth and current depth, close all open li/ul tags
 *  @param  indent          The indent for the current depth.
 *  @param  prevDepth       The previous depth.
 *  @param  depth           The current depth
 */
function closeTags($indent, $prevDepth, $depth = 0)
{
    // Close li/ul tags until we're at current depth
    for ($idex = $prevDepth; $idex > $depth; $idex--)
    {
        printf("<!-- closeTags: prevDepth[ %d ], depth[ %d ], idex[ %d ] -->\n",
                $prevDepth, $depth, $idex);

        $ind = $indent . str_repeat(' ', $idex);
        echo $ind, " </li>\n";

        echo $ind, "</ul>\n";
    }
}
