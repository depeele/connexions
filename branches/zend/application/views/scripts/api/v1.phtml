<?php
/** @file
 *
 *  Present a testing API for JsonRpc
 *
 */
$config  = Connexions::getConfig();
$baseUrl = $config->urls->base;

$this->headLink()->appendStylesheet($this->baseUrl('/css/api.min.css'));

$jQuery = $this->jQuery();
$jQuery->addJavascriptFile($this->baseUrl('js/jsDump.js'))
       ->javascriptCaptureStart();
?>
(function($) {
    $(document).ready(function() {
        var serviceMap  = <?= ($this->server
                                ? $this->server->getServiceMap()
                                : null) ?>;
        var rpcId       = 1;
        var useJsDump   = true;
        var rawData     = null;
        var $services   = $('.services');
        var $results    = $('.results');
        var $clear      = $results.find('a.clear');
        var $result     = $results.find('.result');
        var $serviceUl  = $('<ul />').addClass(  'ui-accordion '
                                               + 'ui-widget '
                                               + 'ui-helper-reset '
                                               + 'ui-accordion-icons' );
        $services.append($serviceUl);

        // Format 'data' according to 'useJsDump'
        function data2html(data)
        {
            if (data === undefined) data    = rawData;
            else                    rawData = data;

            return (data === null
                    ? ''
                    : (useJsDump
                        ? jsDump.parse( data )
                        : JSON.stringify(data, null, '  ')
                              .replace(/</, '&lt;')
                              .replace(/>/, '&gt;')
                              .replace(/&/, '&amp;')) );
        }

        $clear.click(function(e) {
            e.preventDefault();

            $result.empty();
        });

        $result.click(function() {
            // Clicking on the result area will toggle the formatting.
            var $pre    = $result.find('pre');

            useJsDump = (useJsDump === false ? true : false);

            $pre.html( data2html() );
        });

        /** @brief  On form submission, generate and initiate a Json-RPC.
         *  @param  e   The form submit event.
         *
         *  Usage: $('form').bind('submit', rpc_submit)
         *                  .bind('success',
         *                        function(e, data, txtStatus, req) ... )
         *                  .bind('error',
         *                        function(e, txtStatus, req) ... );
         *
         *  By default, result data will be presented in the div with
         *  id 'result'
         */
        function rpc_submit(e)
        {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();

            var $form   = $(e.target);
            var url     = document.location.href;
            
            url = url.substr(0, url.lastIndexOf('/')+1)
                + $form.attr('action');

            // Assemble the Json-RPC structure
            var rpc = {
                version: 2.0,
                method:  $form.find('input[name=method]').val(),
                id:      rpcId++,
                params:  {
                }
            };

            // Include all parameters
            $form.find('input:not(:hidden,:submit)').each(function() {
                var $field  = $(this);

                switch ($field.attr('type'))
                {
                case 'checkbox':
                case 'radio':
                    rpc.params[ $field.attr('name') ] =
                                                $field.attr('checked');
                    break;

                default:
                    rpc.params[ $field.attr('name') ] = $field.val();
                    break;
                }
            });

            var jsonRpc = $form.find('#jsonRpc').is(':checked');
            var reqType = $form.attr('method');
            var reqUrl  = $form.attr('action');
            var reqData;

            if (reqType === 'GET')
            {
                reqUrl  += rpc.method.replace('_', '/');

                if (jsonRpc)
                {
                    reqData  = {
                        'jsonRpc': JSON.stringify(rpc)
                    };
                }
                else
                {
                    reqData = rpc.params;
                }
            }
            else
            {
                reqData = JSON.stringify(rpc);
            }

            // Invoke the Json-RPC
            var overflow    = $result.css('overflow');
            $result.css('overflow', 'hidden').mask();
            $.ajax({
                type:     reqType,
                url:      reqUrl,
                data:     reqData,
                dataType: 'json',
                success: function(data, txtStatus, req) {
                    $form.trigger('success', [data, txtStatus, req]);

                    $result.html(  '<h4 class="success">'
                                 +  rpc.method +': '+ txtStatus
                                 + '</h4>'
                                 + '<pre>'
                                 +  data2html(data)
                                 + '</pre>');
                },
                error: function(req, txtStatus, e) {
                    $form.trigger('error', [txtStatus, req]);

                    // /*
                    $result.html(  '<h3 class="error">'
                                 +  rpc.method +': '+ txtStatus
                                 + '</h3>');
                    // */
                },
                complete: function() {
                    $result.unmask()
                           .css('overflow', overflow);
                }
            });
        }

        /** @brief  Given a service description, generate a matching form
         *          for that service.
         *  @param  service     The service description:
         *                          { envelope:     'JSON-RPC-2.0',
         *                            transport:    'POST',
         *                            parameters:   [
         *                              {type:      %string%,
         *                               name:      %parmater name%,
         *                               optional:  true/false,
         *                               default:   %default value%
         *                              },
         *                              ...
         *                             ],
         *                             returns:     [ ... ]
         *                          }
         *
         *  @return HTML for this method.
         */
        function buildForm(name, info, target)
        {
            var parts   = name.split(/[\._]/);  //'.');
            var lTmpl   = '<li><h4>%method_label%</h4>'
                        +  '<form method="%transport%" '
                        +        'action="">'
                        +   '<input name="method" type="hidden" '
                        +         'value="%method%" />'
                        +  '<div class="fields">'
                        +   '%params%'
                        +  '</div>'
                        +  '<div class="buttons">'
                        +   '<button>POST</button>'
                        +   '<button>GET</button>'
                        +   '<br />'
                        +   '<label for="jsonRpc">jsonRpc</label>'
                        +   ' <input type="checkbox" id="jsonRpc" />'
                        +  '</div>'
                        +  '</form>'
                        + '</li>';
            var pTmpl   =   '<div class="field line">'
                        +    '<label for="%name%" '
                        +           'class="unit">%name%</label>'
                        +    '<input name="%name%" '
                        +           'class="unit lastUnit" '
                        +           'type="%type%" '
                        +          'value="%default%" />'
                        +   '</div>';

            var nParams = info.parameters.length;
            var params  = (nParams > 0
                            ? ''
                            : '&nbsp;<br />&nbsp;<br />');

            for (var idex = 0; idex < nParams; idex++)
            {
                var param   = info.parameters[idex];

                params += pTmpl.replace(/%name%/g, param.name)
                               .replace(/%type%/g, 'text')
                               .replace(/%default%/g,
                                            (param['default'] !== undefined
                                                ? param['default']
                                                : ''));
            }

            var li      = lTmpl.replace(/%method%/g,       name)
                               .replace(/%method_label%/g, parts[1])
                               .replace(/%transport%/g,    info.transport)
                               .replace(/%params%/g,       params);

            return li;
        }

        /** @brief  Bind events for new service forms found in $services.
         */
        function bindForms()
        {
            var $forms      = $services.find('form');
            var $buttons    = $forms.find('button');

            $forms.bind('submit.rpc',  rpc_submit);

            $buttons.bind('click.rpc', function(e) {
                e.preventDefault();

                var $button = $(this);
                var $form   = $button.parents('form:first');

                // Use the button text as the new form method.
                $form.attr('method', $button.text());

                $form.submit();
            });

            $serviceUl.find('h4').click(function() {
                var $ctl    = $(this);
                var $body   = $ctl.next();
                var $toggle = $ctl.find('span:first');

                if ($body.is(':hidden'))
                {
                    $toggle.removeClass(indicator['closed'])
                           .addClass(   indicator['opened']);
                }
                else
                {
                    $toggle.removeClass(indicator['opened'])
                           .addClass(   indicator['closed']);
                }

                $body.slideToggle('fast');
                return false;
            });
        }

        /** @brief  Given a service map, generate forms for each service.
         *  @param  map         The service map is of the form:
         *                          { envelope:     'JSON-RPC-2.0',
         *                            transport:    'POST',
         *                            contentType:  'application/json',
         *                            SMDVersion:   '2.0',
         *                            target:       '/api',
         *                            services:     [
         *                              % name %: % service Description %,
         *                              ...
         *                            ]
         *                          }
         */
        function buildForms(map)
        {
            var $section    = null;
            var lastSection = null;
            $.each(map.services, function(name, info) {
                var parts   = name.split(/[\._]/);  //'.');

                if (lastSection !== parts[0])
                {
                    var li   = '<li>'
                             +   '<h4>'
                             +    "<span class='control'></span>"
                             +    '<a href="#">'+ parts[0] +'</a>'
                             +   '</h4>'
                             + '</li>';
                    var sect = '<ul></ul>';
                    var $li  = $(li);
                    $section = $(sect);
                    
                    $li.addClass( 'ui-accordion-li-fix' )
                            .find('h4')
                                .addClass(  'ui-accordion-header '
                                          + 'ui-state-default '
                                          + 'ui-helper-reset '
                                          + 'ui-corner-top' )
                            .find('span.control')
                                .addClass(  'ui-icon '
                                          + 'ui-icon-triangle-1-e' );

                    $section.addClass(      'service '
                                          + 'service_'+ parts[0] +' '
                                          + 'ui-accordion-content '
                                          + 'ui-helper-reset '
                                          + 'ui-widget-content '
                                          + 'ui-corner-bottom' )
                             .hide();

                    $serviceUl.append( $li.append($section) );

                    lastSection = parts[0];
                }

                var form    = buildForm(name, info, map.target);

                $section.append(form);
            });

            $serviceUl.find('input').input({hideLabel:false});
            $serviceUl.find('button').button();

            bindForms();
        }

        // Fetch the service description and then build forms...
        var indicator   = {
            opened: 'ui-icon-triangle-1-s',
            closed: 'ui-icon-triangle-1-e'
        };

        $services.mask();
        if (serviceMap !== null)
        {
            buildForms(serviceMap);
            $services.unmask();
        }
        else
        {
            $.ajax({
                type:     'GET',
                url:      '?serviceDescription=1',
                dataType: 'json',
                success: function(data, txtStatus, req) {
                    buildForms(data);
                },
                error: function(req, txtStatus, e) {
                    $result.html(  '<h3 class="error">'
                                 +  'Cannot retrieve service map'
                                 + '</h3>');
                },
                complete: function() {
                    $services.unmask();
                }
            });
        }
    });
}(jQuery));
<?php
$jQuery->javascriptCaptureEnd();


?>
<div class='columnHeader'>
 <div class='context-bg connexions_sprites settings_bg 
             ui-corner-left ui-corner-tr'>&nbsp;</div>
 <p>API V1 Explorer</p>
 <p class='seeAlso'>see also the <a href='v2/'>API V2 Explorer</a></p>
</div>
<div class='pane line'>
 <div class='services unit size1of3'>
  <h3>Services</h3>
 </div>
 <div class='results unit size2of3 lastUnit'>
  <h3>Results <a class='clear'>clear</a></h3>
  <div class='result'></div>
 </div>
</div>
