<?php
$config   =  Zend_Registry::get('config');
$api      =& $config->api;
$contact  =& $config->contact;
$url      =  $this->baseUrl('help/developers');

$idDescriptions = array(
    'user'      => "<b>name</b> (user name) or <b>userId</b>",
    'item'      => "<b>url</b>, <b>urlHash</b> (md5 of <a href='{$url}/api/additionalInformation/normalizedUrl'>normalized url</a>) or <b>itemId</b>",
    'tag'       => "<b>tag</b> (tag name) or <b>tagId</b>",
    'bookmark'  => '',
    'date/time' => '<tt>YYYY-MM-DD hh:mm:ss</tt>',
    'activity'  => '<b>activityId</b>',
    'objectType'=> '<b>objectType</b> (<tt>user</tt>, <tt>item</tt>, <tt>tag</tt>, <tt>bookmark</tt>)',
    'operation' => '<b>operation</b> (<tt>save</tt>, <tt>update</tt>, <tt>delete</tt>)',
);
$idDescriptions['bookmark'] =
        "<tt>%user%:%item%</tt> where <tt>%user%</tt> is the "
        . $idDescriptions['user'] ." of the owner and <tt>%item%</tt> is the "
        . $idDescriptions['item'] ." of the bookmarked site";



$jsSectionId = '';
if ($this->section)
{
    $jsSectionId = $this->section;
    if ($this->rest)
    {
        // Navigate to the parent of the final area
        //$rest = preg_replace('/_.*?$/', '', implode('_', $this->rest));
        $rest = implode('_', $this->rest);
        if (! empty($rest))
        {
            $jsSectionId .= '_'. $rest;
            $jsParentId   = preg_replace('/_[^_]*?$/', '', $jsSectionId);
        }
    }
}

Connexions::log('views/scripts/help/main-developers.phtml: '
                .   'topic[ %s ], section[ %s ], rest[ %s ], '
                .   'jsSectionId[ %s ], jsParentId[ %s ]',
                Connexions::varExport($this->topic),
                Connexions::varExport($this->section),
                Connexions::varExport($this->rest),
                $jsSectionId, $jsParentId);

/* :NOTE: Throughout this file, for any url path that will be used to map to
 *        a specific DOM id, the DOM id MUST be lowercase even if the url path
 *        parameters are mixed-case.
 *
 *        For example:
 *          api/user/fetchByTags MUST map to a DOM id of 'api_user_fetchbytags'
 */
?>
<ul class='collapsableList'>
 <li class='collapsable'><!-- introduction-li { -->
  <h3 id='introduction'
      class='toggle<?= Connexions_Help::section_collapsed($this, 'introduction') ?>'><a href='<?= $url ?>/introduction' data-cache.collapsable='introduction_content'>Introduction</a></h3>
  <div id='introduction_content' class='help-content'>
   <p>Connexions is comprised of a combination of server-side PHP and client-side JavaScript/AJAX to provide rich user interaction and functionality.  It requires a server that provides PHP 5+ and MySQL 5+ and a client web browser that is complient with current web standards (e.g. Firefox, Chrome, Opera, and newer versions of Internet Explorer).</p>
   <?php
    if ($contact->services && $contact->services->src)
    {
        $src =& $contact->services->src;

        ?>
   <p>Full sources are available via <a href='<?= $src->url ?>'><?= $src->name ?></a>.</p>
        <?php
    }
   ?>
   </p>
   <p>There are a number of ways developers can interact with connexions.  Pages are broken into partials that can be independently accessed and, for the 'main' partial, rendered in multiple formats.</p>
   <div id='figure1' class='figure'>
    <img src='<?= $this->baseUrl('/images/help/partials.jpg') ?>'
         title='Identification of Partials' />
    <div class='caption'><b>Figure 1</b>: Identification of Partials</div>
   </div>
   <p>The formats currently supported for the 'main' partial are: <b>json</b>, <b>rss</b>, <b>atom</b>, and the default <b>html</b>.</p>
   <p class='continued'>In addition to <i>format</i>, the following URL parameters are supported:</p>
   <ul class='outer'>
    <li>First are the options presented in the <i>Display Options</i> control:
     <ul>
      <li><b>sortBy</b> &mdash; the item property to sort by.  The valid values differ for the various views:
        <ul>
         <li>Bookmarks &mdash; <b>taggedOn</b> (Tag Date), <b>updatedOn</b> (Update Date), <b>title</b>, <b>rating</b>, <b>ratingCount</b>, <b>ratingAvg</b> (Rating Average), <b>userCount</b>;</li>
         <li>People &mdash; <b>fullName</b>, <b>email</b> (Email Address), <b>lastVisit</b> (Last Visit Date), <b>totalTags</b> (Tag Count), <b>totalItems</b> (Item Count);</li>
         <li>Tags &mdash; <b>title</b> (Name), <b>weight</b>;</li>
        </ul>
      </li>
      <li><b>sortOrder</b> &mdash; the sort order to apply to the <b>sortBy</b> property.  This may be <b>ASC</b> (Ascending) or <b>DESC</b> (Descending);</li>
      <li><b>perPage</b> &mdash; the number of items per "page";</li>
     </ul>
    </li>
    <li>Second is <b>page</b>, represented by the <i>Paging</i> control, used to specify which page to present;</li>
   </ul>
   <p>Finally, connexions has a <?= Connexions::wikipedia_a('JSON-RPC') ?> based API which is described in the next section.</p>
  </div>
 </li><!-- introduction-li } -->
  
 <li class='collapsable'><!-- api-li { -->
  <h3 id='api'
      class='toggle<?= Connexions_Help::section_collapsed($this, 'api') ?>'><a href='<?= $url ?>/api' data-cache.collapsable='api_content'>API</a></h3>
  <div id='api_content' class='help-content api'><!-- api { -->
   <div id='api_overview'><!-- api_overview { -->
    <p>The connexions API may be <a href='<?= $api->baseUrl ?>'>directly
    accessed</a> to allow easier understanding via experimentation.  In
    addition to the new, V2 API, the APIs and feeds from the original version
    of connexions (V1) have been maintained and made directly accessible.  See
    the <a href='<?= $this->baseUrl('api/') ?>'>API V1 Explorer</a> as well as
    the original <a href='<?= $this->baseUrl('feeds/') ?>'>feeds</a> 
    (<a href='../feeds/json/'>Json</a>,
     <a href='../feeds/rss/'>RSS</a>, and
     <a href='../feeds/atom/'>Atom</a>).</p>
    <p class='continued'>Connexions makes use of version 2 of the <?= Connexions::wikipedia_a('JSON-RPC') ?> protocol for this API.  The general form of a call to this API is an HTTP POST request with an HTML <tt>Content-Type</tt> header of <tt>application/json</tt> and a JSON-encoded body or a GET request with a JSON-encoded request parameter.  In either case, the JSON-encoded value will have the following general form:</p>
    <pre>
{
    "version":  "2.0",
    "method":   "%the desired API method%",
    "id":       %An id that you may use to match results if needed%,
    "params":   {
        %key%:  %value%,
        ...
    }
}
    </pre>
    <p class='continued'>A successful call will return a result with the following JSON-encoded format:</p>
    <pre>
{
    "version":  "2.0",
    "id":       %The id that you provided in the call%,
    "error":    null,
    "result":   %generated results%
}
    </pre>
    <p class='continued'>In the case of an error, the resulting JSON will look like:</p>
    <pre>
{
    "version":  "2.0",
    "id":       %The id that you provided in the call%,
    "error":    {
        "code":     %JSON-RPC error code%,
        "message":  "%Error message%"
    }
}
    </pre>
    <br />
    <p class='continued'>If <?= Connexions::wikipedia_a('JSONP') ?> is required for your call, you may specify a callback by including a parameter named "callback" or "jsonp" either at the top level:</p>
    <pre>
{
    "version":  "2.0",
    "method":   "%the desired API method%",
    "id":       %An id that you may use to match results if needed%,
    "callback": "callback_function_name",
    "params":   {
        %key%:  %value%,
        ...
    }
}
    </pre>
    <p class='continued'><i>or</i> within the method parameters:</p>
    <pre>
{
    "version":  "2.0",
    "method":   "%the desired API method%",
    "id":       %An id that you may use to match results if needed%,
    "params":   {
        "callback": "callback_function_name",
        %key%:      %value%,
        ...
    }
}
    </pre>
    <p class='continued'>In either case, the resulting JSON, whether success or error, will be wrapped in a call to the specified callback:</p>
    <pre>
callback_function_name({
    "version":  "2.0",
    "id":       %The id that you provided in the call%,
    ...
})
    </pre>

    <p class='continued'>For developers that would like to use the JSON-RPC
    interface using jQuery, here is a simple jQuery extension that should make
    it a simple matter:</p>
    <pre class='javascript'>
<span style='color:#6c6;'>(</span><span style='color:#036;font-weight:bold;'>function</span><span style='color:#6c6;'>(</span>$<span style='color:#6c6;'>)</span> <span style='color:#6c6;'>{</span>
    <span style='color:#090;font-style:italic;'>/** @brief  Perform a JSON-RPC call.
     *  @param  method      The desired RPC method );
     *  @param  params      An object containing the RPC parameters;
     *  @param  options     $.ajax-compatible options object;
     *
     *  Example Usage:
     *      $.jsonRpc{
     *          success: {
     *              // Do something with the JSON-RPC return object 'data'
     *          },
     *          error:   {
     *              // Present an error message
     *          }
     *      );
     */</span>
    $.<span style='color:#060;'>jsonRpc</span> = <span style='color:#036;font-weight:bold;'>function</span><span style='color:#6c6;'>(</span>method, params, options<span style='color:#6c6;'>)</span> <span style='color:#6c6;'>{</span>
        <span style='color:#036;font-weight:bold;'>var</span> rpc = <span style='color:#6c6;'>{</span>
            version:    $.<span style='color:#060;'>jsonRpc</span>.<span style='color:#060;'>settings</span>.<span style='color:#060;'>version</span>,
            id:         $.<span style='color:#060;'>jsonRpc</span>.<span style='color:#060;'>settings</span>.<span style='color:#060;'>id</span>++,
            method:     method,
            params:     params
        <span style='color:#6c6;'>}</span>;
        
        options = $.<span style='color:#060;'>extend</span><span style='color:#6c6;'>(</span><span style='color:#6c6;'>{</span><span style='color:#6c6;'>}</span>, $.<span style='color:#060;'>jsonRpc</span>.<span style='color:#060;'>settings</span>.<span style='color:#060;'>options</span>, options || <span style='color:#6c6;'>{</span><span style='color:#6c6;'>}</span><span style='color:#6c6;'>)</span>;
        <span style='color:#036;font-weight:bold;'>if</span> <span style='color:#6c6;'>(</span>options.<span style='color:#060;'>dataType </span>=== <span style='color:#36c;'>'jsonp'</span><span style='color:#6c6;'>)</span>
        <span style='color:#6c6;'>{</span>
            <span style='color:#090;font-style:italic;'>/* Adjustments for JSONP
             *  - do NOT add a cache-buster value to the URL
             *    (the random callback should be sufficient);
             *  - do NOT add a callback to the URL
             *    (it is instead placed within the RPC);
             *  - use $.ajaxSettings.jsonpCallback() to generate a random name
             *    for the JSONP callback function.
             */</span>
            options.<span style='color:#060;'>cache         </span>= <span style='color:#036;font-weight:bold;'>true</span>;
            options.<span style='color:#060;'>jsonp         </span>= <span style='color:#036;font-weight:bold;'>false</span>;
            options.<span style='color:#060;'>jsonpCallback </span>= $.<span style='color:#060;'>ajaxSettings</span>.<span style='color:#060;'>jsonpCallback</span><span style='color:#6c6;'>(</span><span style='color:#6c6;'>)</span>;
            rpc.<span style='color:#060;'>callback          </span>= options.<span style='color:#060;'>jsonpCallback</span>;
        <span style='color:#6c6;'>}</span>

        options.<span style='color:#060;'>data </span>= JSON.<span style='color:#060;'>stringify</span><span style='color:#6c6;'>(</span>rpc<span style='color:#6c6;'>)</span>;
        $.<span style='color:#060;'>ajax</span><span style='color:#6c6;'>(</span>options<span style='color:#6c6;'>)</span>;
    <span style='color:#6c6;'>}</span>;

    <span style='color:#090;font-style:italic;'>/** @brief  Global JSON-RPC settings.
     *
     *  settings.options may be over-ridden on any single RPC call via the
     *  'options' parameter to $.jsonRpc().
     *
     *  If you wish to over-ride a value for your entire application, simply
     *  modify the desired property of $.jsonRpc.settings directly, e.g.
     *      $.jsonRpc.settings.options.dataType = 'jsonp';
     *
     *  Setting the 'dataType' to 'jsonp' will cause jQuery to automatically
     *  change the 'type' to 'GET'.
     */</span>
    $.<span style='color:#060;'>jsonRpc</span>.<span style='color:#060;'>settings </span>= <span style='color:#6c6;'>{</span>
        version:    <span style='color:#36c;'>'2'</span>,
        id:         <span style='color:#c00'>0</span>,
        options:    <span style='color:#6c6;'>{</span>
            url:        <span style='color:#36c;'>'<?= $api->jsonRpc->url ?>'</span>,
            type:       <span style='color:#36c;'>'GET'</span>,
            dataType:   <span style='color:#36c;'>'jsonp'</span>
        <span style='color:#6c6;'>}</span>
    <span style='color:#6c6;'>}</span>;
<span style='color:#6c6;'>}</span><span style='color:#6c6;'>(</span>jQuery<span style='color:#6c6;'>)</span><span style='color:#6c6;'>)</span>;
    </pre>

    <p>Within this API, there are interfaces that require authentication and
    those that do not.  The only authentication currently supported is the
    normal, cookie-identified, session-based authentication provided by the
    main <a href='<?= $this->baseUrl('auth/signIn') ?>'>sign-in page</a>.  For
    non-POST requests, the authenticated APIs also require the user's <a
    href='<?= $this->baseUrl('settings/account/apiKey') ?>'>apiKey</a> to
    reduce the risk of <?= Connexions::wikipedia_a('Cross-site scripting',
            'cross-site scripting') ?> attacks.  The user may regenerate the
    <b>apiKey</b> at any time.</p>
   </div><!-- api_overview } -->

   <div id='api_methods'><!-- api_methods { -->
    <h4>Methods</h4>

    <p class='continued'>Generally, the API is dividied into six sections:</p>
    <ul class='collapsableList'><!-- api list { -->
     <li class='collapsable'><!-- api_user { -->
      <h4 id='api_user' class='toggle<?= Connexions_Help::rest_collapsed($this, 'user') ?>'><a href='<?= $url ?>/api/user' data-cache.collapsable='api_user_content'>user</a> <span class='description'>&mdash; user-related functionality</span></h4>
      <div id='api_user_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ========= user.find { -->
           <h6 id='api_user_find' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/find') ?> method-name'><a href='<?= $url ?>/api/user/find' data-cache.collapsable='api_user_find_content'>find</a></h6>
           <div id='api_user_find_content' class='api-method help-content'><!-- api-method { -->
            <p>Find a single user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired user's <?= $idDescriptions['user'] ?>;</td></tr>
            </table>

            <p class='return'>Returns the matching <a href='<?= $url ?>/api/records/user'>user record</a> or <tt>null</tt> if there is no match.</p>
           </div><!-- api-method } -->
          </li> <!-- user.find ======= } -->

          <li class='collapsable'> <!-- ========= user.fetch { -->
           <h6 id='api_user_fetch' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/fetch') ?> method-name'><a href='<?= $url ?>/api/user/fetch' data-cache.collapsable='api_user_fetch_content'>fetch</a></h6>
           <div id='api_user_fetch_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all users matching the provided identifiers.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>ids</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned users [ lastVisit DESC, name ASC, fullName ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of users to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including users to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.fetch ======= } -->

          <li class='collapsable'> <!-- ======= user.fetchByTags { -->
           <h6 id='api_user_fetchbytags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/fetchByTags') ?> method-name'><a href='<?= $url ?>/api/user/fetchByTags' data-cache.collapsable='api_user_fetchByTags_content'>fetchByTags</a></h6>
           <div id='api_user_fetchByTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all users that have one or more bookmarks with the given tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned users should have bookmarks for <i>all</i> tags (true) or <i>any</i> of the tags (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned users [ tagCount DESC ];</td></tr>
             <tr><th>count</th><td>The maximum number of users to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including users to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.fetchByTags ======= } -->

          <li class='collapsable'> <!-- ======== user.autocomplete { -->
           <h6 id='api_user_autocomplete' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/autocomplete') ?> method-name'><a href='<?= $url ?>/api/user/autocomplete' data-cache.collapsable='api_user_autocomplete_content'>autocomplete</a></h6>
           <div id='api_user_autocomplete_content' class='api-method help-content'><!-- api-method { -->
            <p>Given a term, retrieve all users that match that term.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>term</th><td>The term to match by user <b>name</b> (user name), <b>fullName</b>, or <b>email</b>;</td></tr>
             <tr><th>limit</th><td>The maximum number of matches to return [ 15 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.autocomplete ======= } -->

          <li class='collapsable'> <!-- ======== user.autocompleteTag { -->
           <h6 id='api_user_autocompletetag' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/autocompleteTag') ?> method-name'><a href='<?= $url ?>/api/user/autocompleteTag' data-cache.collapsable='api_user_autocompleteTag_content'>autocompleteTag</a></h6>
           <div id='api_user_autocompleteTag_content' class='api-method help-content'><!-- api-method { -->
            <p>Given a term, retrieve all user-related tags that match that term.  If <b>tags</b> are specified, they will be used to select all users that have used those tags (tag-related users).  This set of users will then be used to locate all tags used by those users (user-related tags) which will in-turn be the set of tags searched for matches.</p>
            <p>This interface is used for tag autocompletion within the <a href='<?= $this->baseUrl('people') ?>'>people</a> pages.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>term</th><td>The term to match by <b>tag</b> (tag name);</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>.  This list will be used to limit the final set of tags used in locating matches (user-related tags from tag-related users).</tr></tr>
             <tr><th>limit</th><td>The maximum number of matches to return [ 15 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.autocompleteTag ======= } -->

          <li class='collapsable'> <!-- ======== user.getContributors { -->
           <h6 id='api_user_getcontributors' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/getContributors') ?> method-name'><a href='<?= $url ?>/api/user/getContributors' data-cache.collapsable='api_user_getContributors_content'>getContributors</a></h6>
           <div id='api_user_getContributors_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve the set of top "contributors".</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>threshold</th><td>The number of bookmarks required to be considered a "contributor".  A non-negative value will include users that have <i>at least</i> (&gt;=) that many bookmarks while a negative value will include users with <i>up to</i> (&lt;=) the absolute value [ 1 ];</td></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>.  If provided, only users that have bookmarks to one or more of the given items will be included;</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>.  If provided, only users that have used one or more of the given tag9s) will be included;</td></tr>
             <tr><th>order</th><td>The sort order to use in the selection [ totalItems DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of matches to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including users to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.getContributors ======= } -->

          <li class='collapsable'> <!-- ======== user.getContributorCount { -->
           <h6 id='api_user_getcontributorcount' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/getContributorCount') ?> method-name'><a href='<?= $url ?>/api/user/getContributorCount' data-cache.collapsable='api_user_getContributorCount_content'>getContributorCount</a></h6>
           <div id='api_user_getContributorCount_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve the <i>count</i> of "contributors.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>threshold</th><td>The number of bookmarks required to be considered a "contributor".  A non-negative value will include users that have <i>at least</i> (&gt;=) that many bookmarks while a negative value will include users with <i>up to</i> (&lt;=) the absolute value [ 1 ].  If no threshold is provided, one will be computed based upon the distribution of bookmarks.  In this case, the returned object will also include the statistics used to generate the threshold;</td></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>.  If provided, only users that have bookmarks to one or more of the given items will be included;</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>.  If provided, only users that have used one or more of the given tag9s) will be included;</td></tr>
             <tr><th>order</th><td>The sort order to use in the selection [ totalItems DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of matches to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including users to return [ 0 ];</td></tr>
            </table>
            <p class='continued return'>Returns an object of the form:</p>
            <pre>
{
     "total":        %total number of users%,
     "contributors": %number of "contributors"%,
     "threshold":    %The threshold value used%,

     /* If 'threshold' was not explicitly set, "stats" will also be included.
      *
      * Note that 'privates' will only be non-zero <i>if the requester is an
      * authenticated user</i> <b>and</b> the parameters will not result in
      * revealing information about a specific user's private bookmarks.
      */
     "stats":        {
         "privates":         %The number of private bookmarks%,
         "publics":          %The number of public bookmarks%,
         "favorites":        %The number of favorite bookmarks%,
         "rated":            %The number of rated bookmarks%,

         "items_min":        %Minimum number of items for any user%,
         "items_max":        %Maximum number of items for any user%,
         "items_avg":        %Average number of items per user%,
         "items_sd":         %Standard deviation of item counts%,

         "tags_min":         %Minimum number of tags for any user%,
         "tags_max":         %Maximum number of tags for any user%,
         "tags_avg":         %Average number of tags per user%,
         "tags_sd":          %Standard deviation of tag counts%,

         "bookmarks_min":    %Minimum number of bookmarks for any user%,
         "bookmarks_max":    %Maximum number of bookmarks for any user%,
         "bookmarks_avg":    %Average number of bookmarks per user%,
         "bookmarks_sd":     %Standard deviation of bookmark counts%,
     }
}
            </pre>
           </div><!-- api-method } -->
          </li> <!-- user.getContributorCount ======= } -->

          <li class='collapsable'> <!-- ======== user.getTimeline { -->
           <h6 id='api_user_gettimeline' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/getTimeline') ?> method-name'><a href='<?= $url ?>/api/user/getTimeline' data-cache.collapsable='api_user_getTimeline_content'>getTimeline</a></h6>
           <div id='api_user_getTimeline_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve the lastVisit date/times for one or more users.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>group</th><td>The desired <a href='<?= $url ?>/api/additionalInformation/timelineGrouping'>timeline grouping</a>.</td></tr>
             <tr><th>order</th><td>The sort order to use in the selection [ lastVisit DESC ];</td></tr>
             <tr><th>count</th><td>The maximum number of users to include in the timeline [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including date/times for the timeline [ 0 ];</td></tr>
             <tr><th>from</th><td>Limit the timeline to date/times <i>after</i> this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
             <tr><th>until</th><td>Limit the timeline to date/times <i>before</i> this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
            </table>

            <p class='return'>Returns a <a href='<?= $url ?>/api/records/timeline'>timeline object</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.getTimeline ======= } -->
         </ul>
        </li><!-- unauthenticated } -->

        <li class='collapsable'><!-- authenticated { -->
         <h5 class='toggle'><span>Authenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== user.renameTags { -->
           <h6 id='api_user_renametags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/renameTags') ?> method-name'><a href='<?= $url ?>/api/user/renameTags' data-cache.collapsable='api_user_renameTags_content'>renameTags</a></h6>
           <div id='api_user_renameTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Rename one or more tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>renames</th><td>A comma-separated list of rename items of the form <tt>oldName:newName</tt></td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>
            <p class='continued return'>Returns a results object of the form:</p>
            <pre>
{
     "%oldName%": true | "%Failure message%",
     ...
}
            </pre>
           </div><!-- api-method } -->
          </li> <!-- user.renameTags ======= } -->

          <li class='collapsable'> <!-- ======== user.deleteTags { -->
           <h6 id='api_user_deletetags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/deleteTags') ?> method-name'><a href='<?= $url ?>/api/user/deleteTags' data-cache.collapsable='api_user_deleteTags_content'>deleteTags</a></h6>
           <div id='api_user_deleteTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Delete one or more tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>
            <p class='continued return'>Returns a results object of the form:</p>
            <pre>
{
     "%tagName%": true | "%Failure message%",
     ...
}
            </pre>

            <p>Note that if deleting a tag will result in one or more bookmarks with no tags, the deletion of that tag will fail.</p>

           </div><!-- api-method } -->
          </li> <!-- user.deleteTags ======= } -->

          <li class='collapsable'> <!-- ======== user.addToNetwork { -->
           <h6 id='api_user_addtonetwork' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/addToNetwork') ?> method-name'><a href='<?= $url ?>/api/user/addToNetwork' data-cache.collapsable='api_user_addToNetwork_content'>addToNetwork</a></h6>
           <div id='api_user_addToNetwork_content' class='api-method help-content'><!-- api-method { -->
            <p>Add one or more users to the network of the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='continued return'>Returns a results object of the form:</p>
            <pre>
{
     "%userName%": true | "%Failure message%",
     ...
}
            </pre>
           </div><!-- api-method } -->
          </li> <!-- user.addToNetwork ======= } -->

          <li class='collapsable'> <!-- ======== user.removeFromNetwork { -->
           <h6 id='api_user_removefromnetwork' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/removeFromNetwork') ?> method-name'><a href='<?= $url ?>/api/user/removeFromNetwork' data-cache.collapsable='api_user_removeFromNetwork_content'>removeFromNetwork</a></h6>
           <div id='api_user_removeFromNetwork_content' class='api-method help-content'><!-- api-method { -->
            <p>Remove one or more users from the network of the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='continued return'>Returns a results object of the form:</p>
            <pre>
{
     "%userName%": true | "%Failure message%",
     ...
}
            </pre>
           </div><!-- api-method } -->
          </li> <!-- user.removeFromNetwork ======= } -->

          <li class='collapsable'> <!-- ======== user.autocompleteMyTags { -->
           <h6 id='api_user_autocompletemytags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/autocompleteMyTags') ?> method-name'><a href='<?= $url ?>/api/user/autocompleteMyTags' data-cache.collapsable='api_user_autocompleteMyTags_content'>autocompleteMyTags</a></h6>
           <div id='api_user_autocompleteMyTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Perform tag autocompletion based upon the tags used by the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>term</th><td>The term to match by <b>tag</b> (tag name);</td></tr>
             <tr><th>limit</th><td>The maximum number of matches to return [ 15 ];</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.autocompleteMyTags ======= } -->

          <li class='collapsable'> <!-- ======== user.update { -->
           <h6 id='api_user_update' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/update') ?> method-name'><a href='<?= $url ?>/api/user/update' data-cache.collapsable='api_user_update_content'>update</a></h6>
           <div id='api_user_update_content' class='api-method help-content'><!-- api-method { -->
            <p>Update the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>fullName</th><td>The new <b>fullName</b> (<tt>null</tt> indicates no change);</td></tr>
             <tr><th>email</th><td>The new <b>email</b> (<tt>null</tt> indicates no change);</td></tr>
             <tr><th>pictureUrl</th><td>The new <b>pictureUrl</b> to the user's avatar image;</td></tr>
             <tr><th>profile</th><td>The new text of the user's description of themselves;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns the updated <a href='<?= $url ?>/api/records/user'>user record</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.update ======= } -->

          <li class='collapsable'> <!-- ======== user.regenerateApiKey { -->
           <h6 id='api_user_regenerateapikey' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/regenerateApiKey') ?> method-name'><a href='<?= $url ?>/api/user/regenerateApiKey' data-cache.collapsable='api_user_regenerateApiKey_content'>regenerateApiKey</a></h6>
           <div id='api_user_regenerateApiKey_content' class='api-method help-content'><!-- api-method { -->
            <p>Regenerate the apiKey for the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns the newly generated apiKey.</p>
           </div><!-- api-method } -->
          </li> <!-- user.regenerateApiKey ======= } -->

          <li class='collapsable'> <!-- ======== user.updateCredentials { -->
           <h6 id='api_user_updatecredentials' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/updateCredentials') ?> method-name'><a href='<?= $url ?>/api/user/updateCredentials' data-cache.collapsable='api_user_updateCredentials_content'>updateCredentials</a></h6>
           <div id='api_user_updateCredentials_content' class='api-method help-content'><!-- api-method { -->
            <p>Update the credentials for the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>credentials</th><td>A JSON-encoded array of <a href='<?= $url ?>/api/records/credential'>credential records</a>;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns an array of updated <a href='<?= $url ?>/api/records/credential'>credential records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.updateCredentials ======= } -->

          <li class='collapsable'> <!-- ======== user.deleteCredential { -->
           <h6 id='api_user_deletecredential' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/deleteCredential') ?> method-name'><a href='<?= $url ?>/api/user/deleteCredential' data-cache.collapsable='api_user_deleteCredential_content'>deleteCredential</a></h6>
           <div id='api_user_deleteCredential_content' class='api-method help-content'><!-- api-method { -->
            <p>Delete a single credential for the authenticated user.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>credential</th><td>The credentials <b>userAuthId</b>;</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns an empty <a href='<?= $url ?>/api/records/credential'>credential record</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.deleteCredential ======= } -->

          <li class='collapsable'> <!-- ======== user.cropAvatar { -->
           <h6 id='api_user_cropavatar' class='toggle <?= Connexions_Help::rest_collapsed($this, 'user/cropAvatar') ?> method-name'><a href='<?= $url ?>/api/user/cropAvatar' data-cache.collapsable='api_user_cropAvatar_content'>cropAvatar</a></h6>
           <div id='api_user_cropAvatar_content' class='api-method help-content'><!-- api-method { -->
            <p>Given a <i>local URL</i> to an avatar image, along with cropping information, perform the image manipulation to accomplish the crop, and move the resulting image to the avatar directory with a name based upon the authenticated user.</p>

            <p>By <i>local URL</i> we mean a URL that refers to <i>this</i> server.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>url</th><td>The <i>local URL</i> of the source image;</td></tr>
             <tr><th>crop</th><td>Cropping information of the form:
    <pre>
{
     "width":    %crop width%,                           // 50
     "height":   %crop height%,                          // 50
     "ul":       [ %upper-left  x%, %upper-left  y% ],   // [ 0,   0 ]
     "lr":       [ %lower-right x%, %lower-right y% ],   // [ 50, 50 ]
}
    </pre>

              <p class='continued'>Note that if <tt>lr</tt> is not provided, it will be computed as:</p>
              <pre>
  [ ul[0] + width, ul[1] + height ]
              </pre>
             </td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns the <i>local URL</i> of the new, cropped image.</p>

            <p>This interface is used in <a href='<?= $this->baseUrl('settings/account/info') ?>'>settings/account/info</a> when the user clicks on their avatar image to select a new avatar.</p>
           </div><!-- api-method } -->
          </li> <!-- user.cropAvatar ======= } -->
         </ul>
        </li><!-- authenticated } -->
       </ul>
     </li><!-- api_user } -->
   
     <li class='collapsable'><!-- api_item { -->
      <h4 id='api_item' id='api_item' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item') ?>'><a href='<?= $url ?>/api/item' data-cache.collapsable='api_item_content'>item</a> <span class='description'>&mdash; item/url methods</span></h4>
      <div id='api_item_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== item.find { -->
           <h6 id='api_item_find' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/find') ?> method-name'><a href='<?= $url ?>/api/item/find' data-cache.collapsable='api_item_find_content'>find</a></h6>
           <div id='api_item_find_content' class='api-method help-content'><!-- api-method { -->
            <p>Find a single item/url.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired items's <?= $idDescriptions['item'] ?>;</td></tr>
            </table>

            <p class='return'>Returns the matching <a href='<?= $url ?>/api/records/item'>item record</a> or <tt>null</tt> if there is no match.</p>
           </div><!-- api-method } -->
          </li> <!-- item.find ======= } -->

          <li class='collapsable'> <!-- ======== item.fetch { -->
           <h6 id='api_item_fetch' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/fetch') ?> method-name'><a href='<?= $url ?>/api/item/fetch' data-cache.collapsable='api_item_fetch_content'>fetch</a></h6>
           <div id='api_item_fetch_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all items matching the provided identifiers.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>ids</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned items [ url ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of items to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching items to begin including items to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/item'>item records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- item.fetch ======= } -->

          <li class='collapsable'> <!-- ======== item.fetchByUsers { -->
           <h6 id='api_item_fetchbyusers' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/fetchByUsers') ?> method-name'><a href='<?= $url ?>/api/item/fetchByUsers' data-cache.collapsable='api_item_fetchByUsers_content'>fetchByUsers</a></h6>
           <div id='api_item_fetchByUsers_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all items that have been bookmarked by the given users.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned items should have bookmarks by <i>all</i> users (true) or <i>any</i> of the users (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned items [ userCount DESC, tagCount DESC, userItemCount DESC urlHash ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of items to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching items to begin including items to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/item'>item records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- item.fetchByUsers ======= } -->

          <li class='collapsable'> <!-- ======== item.fetchByTags { -->
           <h6 id='api_item_fetchbytags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/fetchByTags') ?> method-name'><a href='<?= $url ?>/api/item/fetchByTags' data-cache.collapsable='api_item_fetchByTags_content'>fetchByTags</a></h6>
           <div id='api_item_fetchByTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all items that have been bookmarked with the given tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned items should have bookmarks with <i>all</i> tags (true) or <i>any</i> of the tags (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned items [ tagCount DESC, userCount DESC, userItemCount DESC urlHash ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of items to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching items to begin including items to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/item'>item records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- item.fetchByTags ======= } -->

          <li class='collapsable'> <!-- ======== item.fetchByUsersAndTags { -->
           <h6 id='api_item_fetchbyusersandtags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/fetchByUsersAndTags') ?> method-name'><a href='<?= $url ?>/api/item/fetchByUsersAndTags' data-cache.collapsable='api_item_fetchByUsersAndTags_content'>fetchByUsersAndTags</a></h6>
           <div id='api_item_fetchByUsersAndTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all items that have been bookmarked by the given users with the given tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>exactUsers</th><td>A boolean indicating whether the returned items should have bookmarks by <i>all</i> users (true) or <i>any</i> of the users (false) [ true ];</td></tr>
             <tr><th>exactTags</th><td>A boolean indicating whether the returned items should have bookmarks with <i>all</i> tags (true) or <i>any</i> of the tags (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned items [ userItemCount DESC, userCount DESC, tagCount DESC, urlHash ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of items to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching items to begin including items to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/item'>item records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- item.fetchByUsersAndTags ======= } -->

          <li class='collapsable'> <!-- ======== item.fetchSimilar { -->
           <h6 id='api_item_fetchsimilar' class='toggle <?= Connexions_Help::rest_collapsed($this, 'item/fetchSimilar') ?> method-name'><a href='<?= $url ?>/api/item/fetchSimilar' data-cache.collapsable='api_item_fetchSimilar_content'>fetchSimilar</a></h6>
           <div id='api_item_fetchSimilar_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all items that are "similar" to the provided item where "similar" is a match to the <i>host</i> portion of the url &mdash; specifically <tt>://%host%</tt>.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired items's <?= $idDescriptions['item'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned items [ url ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of items to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching items to begin including items to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/item'>item records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- item.fetchSimilar ======= } -->
         </ul>
        </li><!-- unauthenticated } -->

       </ul>
      </div>
     </li><!-- api_item } -->
   
     <li class='collapsable'><!-- api_tag { -->
      <h4 id='api_tag' id='api_tag' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag') ?>'><a href='<?= $url ?>/api/tag' data-cache.collapsable='api_tag_content'>tag</a> <span class='description'>&mdash; tag-related operations</span></h4>
      <div id='api_tag_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== tag.find { -->
           <h6 id='api_tag_find' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/find') ?> method-name'><a href='<?= $url ?>/api/tag/find' data-cache.collapsable='api_tag_find_content'>find</a></h6>
           <div id='api_tag_find_content' class='api-method help-content'><!-- api-method { -->
            <p>Find a single tag.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired tag by <?= $idDescriptions['tag'] ?>;</td></tr>
            </table>

            <p class='return'>Returns the matching <a href='<?= $url ?>/api/records/tag'>tag record</a> or <tt>null</tt> if there is no match.</p>
           </div><!-- api-method } -->
          </li> <!-- tag.find ======= } -->

          <li class='collapsable'> <!-- ======== tag.fetch { -->
           <h6 id='api_tag_fetch' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/fetch') ?> method-name'><a href='<?= $url ?>/api/tag/fetch' data-cache.collapsable='api_tag_fetch_content'>fetch</a></h6>
           <div id='api_tag_fetch_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all tags matching the provided identifiers.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>ids</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned tags [ tag ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of tags to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching tags to begin including tags to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- tag.fetch ======= } -->

          <li class='collapsable'> <!-- ======== tag.fetchByUsers { -->
           <h6 id='api_tag_fetchbyusers' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/fetchByUsers') ?> method-name'><a href='<?= $url ?>/api/tag/fetchByUsers' data-cache.collapsable='api_tag_fetchByUsers_content'>fetchByUsers</a></h6>
           <div id='api_tag_fetchByUsers_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve tags that have been used by the given users.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned tags [ userCount DESC, userItemCount DESC, tag ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of tags to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching tags to begin including tags to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- tag.fetchByUsers ======= } -->

          <li class='collapsable'> <!-- ======== tag.fetchByItems { -->
           <h6 id='api_tag_fetchbyitems' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/fetchByItems') ?> method-name'><a href='<?= $url ?>/api/tag/fetchByItems' data-cache.collapsable='api_tag_fetchByItems_content'>fetchByItems</a></h6>
           <div id='api_tag_fetchByItems_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve tags that have been used to bookmark the given items.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>.  If provided, tags used with one or more of the given items will be included;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned tags [ itemCount DESC, userItemCount DESC, tag ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of tags to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching tags to begin including tags to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- tag.fetchByItems ======= } -->

          <li class='collapsable'> <!-- ======== tag.fetchByBookmarks { -->
           <h6 id='api_tag_fetchbybookmarks' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/fetchByBookmarks') ?> method-name'><a href='<?= $url ?>/api/tag/fetchByBookmarks' data-cache.collapsable='api_tag_fetchByBookmarks_content'>fetchByBookmarks</a></h6>
           <div id='api_tag_fetchByBookmarks_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all tags used with the given bookmarks.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>bookmarks</th><td>A comma-separated list of bookmarks in the form <?= $idDescriptions['bookmark'] ?>.  If the bookmark is private, it will only be returned if the currently authenticated user is the owner.</tr>
             <tr><th>order</th><td>The sort order to apply to the returned tags [ userItemCount DESC, userCount DESC, tag ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of tags to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching tags to begin including tags to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- tag.fetchByBookmarks ======= } -->

          <li class='collapsable'> <!-- ======== tag.autocompleteUser { -->
           <h6 id='api_tag_autocompleteuser' class='toggle <?= Connexions_Help::rest_collapsed($this, 'tag/autocompleteUser') ?> method-name'><a href='<?= $url ?>/api/tag/autocompleteUser' data-cache.collapsable='api_tag_autocompleteUser_content'>autocompleteUser</a></h6>
           <div id='api_tag_autocompleteUser_content' class='api-method help-content'><!-- api-method { -->
            <p>Given a term, retrieve all tag-related users that match that term.  If <b>users</b> are specified, they will be used to select all tags used by those users (user-related tags).  This set of tags will then be used to locate all users that use those tags (tag-related users) which will in-turn be the set of users searched for matches.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>term</th><td>The term to match by user <b>name</b> (user name), <b>fullName</b>, or <b>email</b>;</td></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>.  This list will be used to limit the final set of users used in locating matches (tag-related users from user-related tags).</td></tr>
             <tr><th>limit</th><td>The maximum number of matches to return [ 15 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/user'>user records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- tag.autocompleteUser ======= } -->
         </ul>
        </li><!-- unauthenticated } -->
       </ul>
      </div>
     </li><!-- api_tag } -->
   
     <li class='collapsable'><!-- api_bookmark { -->
      <h4 id='api_bookmark' id='api_bookmark' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark') ?>'><a href='<?= $url ?>/api/bookmark' data-cache.collapsable='api_bookmark_content'>bookmark</a> <span class='description'>&mdash; bookmark-related functions</span></h4>
      <div id='api_bookmark_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== bookmark.fetch { -->
           <h6 id='api_bookmark_fetch' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetch') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetch' data-cache.collapsable='api_bookmark_fetch_content'>fetch</a></h6>
           <div id='api_bookmark_fetch_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all bookmarks matching the provided identifiers.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>ids</th><td>A comma-separated list of bookmarks by <?= $idDescriptions['bookmark'] ?>;</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updateOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
             <tr><th>since</th><td>Limit the results to bookmarks updated after this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetch ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.fetchByTags { -->
           <h6 id='api_bookmark_fetchbytags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetchByTags') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetchByTags' data-cache.collapsable='api_bookmark_fetchByTags_content'>fetchByTags</a></h6>
           <div id='api_bookmark_fetchByTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all bookmarks that have one or more of the given tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned bookmarks should use <i>all</i> tags (true) or <i>any</i> of the tags (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updatedOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetchByTags ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.fetchByUsers { -->
           <h6 id='api_bookmark_fetchbyusers' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetchByUsers') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetchByUsers' data-cache.collapsable='api_bookmark_fetchByUsers_content'>fetchByUsers</a></h6>
           <div id='api_bookmark_fetchByUsers_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all bookmarks that belong to one or more of the given users.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned bookmarks should use <i>all</i> users (true) or <i>any</i> of the users (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updatedOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetchByUsers ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.fetchByItems { -->
           <h6 id='api_bookmark_fetchbyitems' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetchByItems') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetchByItems' data-cache.collapsable='api_bookmark_fetchByItems_content'>fetchByItems</a></h6>
           <div id='api_bookmark_fetchByItems_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all bookmarks that reference one or more of the given items.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>.  If provided, only users that have bookmarks to one or more of the given items will be included;</td></tr>
             <tr><th>exact</th><td>A boolean indicating whether the returned bookmarks should use <i>all</i> items (true) or <i>any</i> of the items (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updatedOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetchByitems ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.fetchByUsersAndTags { -->
           <h6 id='api_bookmark_fetchbyusersandtags' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetchByUsersAndTags') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetchByUsersAndTags' data-cache.collapsable='api_bookmark_fetchByUsersAndTags_content'>fetchByUsersAndTags</a></h6>
           <div id='api_bookmark_fetchByUsersAndTags_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all bookmarks owned by one or more of the given users that use one or more of the given tags.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>exactUsers</th><td>A boolean indicating whether the returned bookmarks must be owned by one or more users (true) or if a match on tags is sufficient (false) [ true ];</td></tr>
             <tr><th>exactTags</th><td>A boolean indicating whether the returned bookmarks must contain <i>all</i> tags (true) or <i>any</i> of the tags (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updatedOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetchByUsersAndTags ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.fetchByUsersAndItems { -->
           <h6 id='api_bookmark_fetchbyusersanditems' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/fetchByUsersAndItems') ?> method-name'><a href='<?= $url ?>/api/bookmark/fetchByUsersAndItems' data-cache.collapsable='api_bookmark_fetchByUsersAndItems_content'>fetchByUsersAndItems</a></h6>
           <div id='api_bookmark_fetchByUsersAndItems_content' class='api-method help-content'><!-- api-method { -->
            <p>Fetch all bookmarks owned by one or more of the given users that reference one or more of the given items.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>;</td></tr>
             <tr><th>exactUsers</th><td>A boolean indicating whether the returned bookmarks must be owned by one or more users (true) or if a match on tags is sufficient (false) [ true ];</td></tr>
             <tr><th>exactItems</th><td>A boolean indicating whether the returned bookmarks must reference one or more items (true) or if a match on users is sufficient (false) [ true ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned bookmarks [ taggedOn DESC, updatedOn DESC, name ASC ];</td></tr>
             <tr><th>count</th><td>The maximum number of bookmarks to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching bookmarks to begin including bookmarks to return [ 0 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/bookmark'>bookmark records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.fetchByUsersAndItems ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.autocompleteTag { -->
           <h6 id='api_bookmark_autocompleteuser' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/autocompleteTag') ?> method-name'><a href='<?= $url ?>/api/bookmark/autocompleteTag' data-cache.collapsable='api_bookmark_autocompleteTag_content'>autocompleteTag</a></h6>
           <div id='api_bookmark_autocompleteTag_content' class='api-method help-content'><!-- api-method { -->
            <p>Given a term, retrieve all bookmark-related tags that match that term.  If <b>tags</b>, <b>users</b>, or <b>items</b> are specified, they will be used to select a matching set of bookmarks.  This set of bookmarks will then be used to locate all tags related to those bookmarks (bookmark-related tags) which will in-turn be the set of tags searched for matches.  Note that the valid combinations of <b>tags</b>, <b>users</b>, and <b>items</b>, in order of precedence, are [<b>users</b>], [<b>users, tags</b>], [<b>items</b>], [<b>items, tags</b>], and [<b>tags</b>].</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>term</th><td>The term to match by <b>tag</b> (tag name);</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>users</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</tr></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>;</td></tr>
             <tr><th>limit</th><td>The maximum number of matches to return [ 15 ];</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/tag'>tag records</a>.</p>

           </div><!-- api-method } -->
          </li> <!-- bookmark.autocompleteTag ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.getTimeline { -->
           <h6 id='api_bookmark_gettimeline' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/getTimeline') ?> method-name'><a href='<?= $url ?>/api/bookmark/getTimeline' data-cache.collapsable='api_bookmark_getTimeline_content'>getTimeline</a></h6>
           <div id='api_bookmark_getTimeline_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve the taggedOn date/times for one or more bookmarks.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?>;</td></tr>
             <tr><th>items</th><td>A comma-separated list of items by <?= $idDescriptions['item'] ?>;</td></tr>
             <tr><th>tags</th><td>A comma-separated list of tags by <?= $idDescriptions['tag'] ?>;</td></tr>
             <tr><th>group</th><td>The desired <a href='<?= $url ?>/api/additionalInformation/timelineGrouping'>timeline grouping</a>.</td></tr>
             <tr><th>order</th><td>The sort order to use in the selection [ lastVisit DESC ];</td></tr>
             <tr><th>count</th><td>The maximum number of users to include in the timeline [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching users to begin including date/times for the timeline [ 0 ];</td></tr>
             <tr><th>from</th><td>Limit the timeline to date/times <i>after</i> this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
             <tr><th>until</th><td>Limit the timeline to date/times <i>before</i> this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
            </table>

            <p class='return'>Returns a <a href='<?= $url ?>/api/records/timeline'>timeline object</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- user.getTimeline ======= } -->
         </ul>
        </li><!-- unauthenticated } -->

        <li class='collapsable'><!-- authenticated { -->
         <h5 class='toggle'><span>Authenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== bookmark.find { -->
           <h6 id='api_bookmark_find' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/find') ?> method-name'><a href='<?= $url ?>/api/bookmark/find' data-cache.collapsable='api_bookmark_find_content'>find</a></h6>
           <div id='api_bookmark_find_content' class='api-method help-content'><!-- api-method { -->
            <p>Find a single bookmark.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired bookmark's identifier in the form <?= $idDescriptions['bookmark'] ?>.  If the bookmark is private, it will only be returned if the currently authenticated user is the owner.</tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns the matching <a href='<?= $url ?>/api/records/bookmark'>bookmark record</a> or <tt>null</tt> if there is no match.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.find ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.update { -->
           <h6 id='api_bookmark_update' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/update') ?> method-name'><a href='<?= $url ?>/api/bookmark/update' data-cache.collapsable='api_bookmark_update_content'>update</a></h6>
           <div id='api_bookmark_update_content' class='api-method help-content'><!-- api-method { -->
            <p>Update or create a bookmark.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired bookmark's identifier in the form <?= $idDescriptions['bookmark'] ?>;</tr>
             <tr><th>name</th><td>The (new) name for the bookmark [ empty == no change ];</td></tr>
             <tr><th>description</th><td>The (new) description for the bookmark [ empty == no change ];</td></tr>
             <tr><th>rating</th><td>The (new) rating ( 0-5 ) for the bookmark [ empty == no change, 0 == no rating ];</td></tr>
             <tr><th>isFavorite</th><td>The (new) favorite value (true | false) for the bookmark [ empty == no change ];</td></tr>
             <tr><th>isPrivate</th><td>The (new) privacy value (true | false) for the bookmark [ empty == no change ];</td></tr>
             <tr><th>tags</th><td>A comma-separated list of the (new) set of tags by <?= $idDescriptions['tag'] ?> [ empty == no change ];</td></tr>
             <tr><th>url</th><td>The (new) url for the bookmark [ empty == no change ];</td></tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns the new/updated <a href='<?= $url ?>/api/records/bookmark'>bookmark record</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.update ======= } -->

          <li class='collapsable'> <!-- ======== bookmark.delete { -->
           <h6 id='api_bookmark_delete' class='toggle <?= Connexions_Help::rest_collapsed($this, 'bookmark/delete') ?> method-name'><a href='<?= $url ?>/api/bookmark/delete' data-cache.collapsable='api_bookmark_delete_content'>delete</a></h6>
           <div id='api_bookmark_delete_content' class='api-method help-content'><!-- api-method { -->
            <p>Delete the identified bookmark.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired bookmark's identifier in the form <?= $idDescriptions['bookmark'] ?>;</tr>
             <tr><th>apiKey</th><td>The apiKey for the currently authenticated user.  Only required for non-POST requests;</td></tr>
            </table>

            <p class='return'>Returns an empty result on success.</p>
           </div><!-- api-method } -->
          </li> <!-- bookmark.delete ======= } -->

         </ul>
        </li><!-- authenticated } -->
       </ul>
      </div>
     </li><!-- api_bookmark } -->
   
     <li class='collapsable'><!-- api_activity { -->
      <h4 id='api_activity' id='api_activity' class='toggle <?= Connexions_Help::rest_collapsed($this, 'activity') ?>'><a href='<?= $url ?>/api/activity' data-cache.collapsable='api_activity_content'>activity</a> <span class='description'>&mdash; activity stream access</span></h4>
      <div id='api_activity_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== activity.find { -->
           <h6 id='api_activity_find' class='toggle <?= Connexions_Help::rest_collapsed($this, 'activity/find') ?> method-name'><a href='<?= $url ?>/api/activity/find' data-cache.collapsable='api_activity_find_content'>find</a></h6>
           <div id='api_activity_find_content' class='api-method help-content'><!-- api-method { -->
            <p>Find a single activity entry.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>id</th><td>The desired activity entry's <?= $idDescriptions['activity'] ?>;</td></tr>
            </table>

            <p class='return'>Returns the matching <a href='<?= $url ?>/api/records/activity'>activity record</a> or <tt>null</tt> if there is no match.</p>
           </div><!-- api-method } -->
          </li> <!-- activity.find ======= } -->

          <li class='collapsable'> <!-- ======== activity.fetch { -->
           <h6 id='api_activity_fetch' class='toggle <?= Connexions_Help::rest_collapsed($this, 'activity/fetch') ?> method-name'><a href='<?= $url ?>/api/activity/fetch' data-cache.collapsable='api_activity_fetch_content'>fetch</a></h6>
           <div id='api_activity_fetch_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all activity records matching the provided identifiers.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>ids</th><td>A comma-separated list of activities by <?= $idDescriptions['activity'] ?> [ empty indicates all activities ];</td></tr>
             <tr><th>objectType</th><td>A comma-separated list of desired object types by <?= $idDescriptions['objectType'] ?> [ empty indicates all object types ];</td></tr>
             <tr><th>operation</th><td>A comma-separated list of desired operations by <?= $idDescriptions['operation'] ?> [ empty indicates any operation ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned activities [ time DESC ];</td></tr>
             <tr><th>count</th><td>The maximum number of activities to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching activities to begin including activities to return [ 0 ];</td></tr>
             <tr><th>since</th><td>Limit the results to activities created after this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/activity'>activity records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- activity.fetch ======= } -->

          <li class='collapsable'> <!-- ======== activity.fetchByUsers { -->
           <h6 id='api_activity_fetchByUsers' class='toggle <?= Connexions_Help::rest_collapsed($this, 'activity/fetchByUsers') ?> method-name'><a href='<?= $url ?>/api/activity/fetchByUsers' data-cache.collapsable='api_activity_fetchByUsers_content'>fetchByUsers</a></h6>
           <div id='api_activity_fetchByUsers_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve all activity records for the given user(s).</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>users</th><td>A comma-separated list of users by <?= $idDescriptions['user'] ?> [ empty indicates all users ];</td></tr>
             <tr><th>objectType</th><td>A comma-separated list of desired object types by <?= $idDescriptions['objectType'] ?> [ empty indicates all object types ];</td></tr>
             <tr><th>operation</th><td>A comma-separated list of desired operations by <?= $idDescriptions['operation'] ?> [ empty indicates any operation ];</td></tr>
             <tr><th>order</th><td>The sort order to apply to the returned activities [ time DESC ];</td></tr>
             <tr><th>count</th><td>The maximum number of activities to return [ 50 ];</td></tr>
             <tr><th>offset</th><td>The offset within the list of all matching activities to begin including activities to return [ 0 ];</td></tr>
             <tr><th>since</th><td>Limit the results to activities created after this date/time.  The date/time should be in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
            </table>

            <p class='return'>Returns an array of zero or more <a href='<?= $url ?>/api/records/activity'>activity records</a>.</p>
           </div><!-- api-method } -->
          </li> <!-- activity.fetchByUsers ======= } -->
         </ul>
        </li><!-- unauthenticated } -->
       </ul>
      </div>
     </li><!-- api_activity } -->
   
     <li class='collapsable'><!-- api_util { -->
      <h4 id='api_util' id='api_util' class='toggle <?= Connexions_Help::rest_collapsed($this, 'util') ?>'><a href='<?= $url ?>/api/util' data-cache.collapsable='api_util_content'>util</a> <span class='description'>&mdash; general purpose utilities</span></h4>
      <div id='api_util_content' class='help-content'>
       <ul class='collapsableList'>
        <li class='collapsable'><!-- unauthenticated { -->
         <h5 class='toggle'><span>Unauthenticated Methods</span></h5>
         <ul class='collapsableList help-content'>
          <li class='collapsable'> <!-- ======== util.getHead { -->
           <h6 id='api_util_gethead' class='toggle <?= Connexions_Help::rest_collapsed($this, 'util/getHead') ?> method-name'><a href='<?= $url ?>/api/util/getHead' data-cache.collapsable='api_util_getHead_content'>getHead</a></h6>
           <div id='api_util_getHead_content' class='api-method help-content'><!-- api-method { -->
            <p>Retrieve the HTML &lt;head&gt; of the given url.</p>
            <table class='parameters'>
             <tr><th>Parameters</th><th>Description</th></tr>
             <tr><th>url</th><td>The url of the desired site.</tr>
             <tr><th>keepTags</th><td>A comma-separated list of HTML header tags that should be kept [ all ].</tr>
            </table>

            <p class='return continued'>Returns an object containing information about the provided <tt>url</tt>.  This object will have the form:</p>
            <pre>
{
    "url":  "%The URL used for the retrieval%",
    "html": "%The HTML results from the head request, possibly limited to the specified set of HTML header tags%"
}
            </pre>
           </div><!-- api-method } -->
          </li> <!-- util.getHead ======= } -->
         </ul>
        </li><!-- unauthenticated } -->
       </ul>
      </div>
     </li><!-- api_util } -->
    </ul><!-- api list } -->
   </div><!-- api_methods } -->

   <div id='api_records'><!-- api_records { -->
    <h4>Records</h4>
    <p class='continued'>The primary records returned by the APIs are:</p>
    <ul class='collapsableList'><!-- api-records { -->
     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_user' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/user') ?>'><a href='<?= $url ?>/api/records/user' data-cache.collapsable='api_records_user_content'>user</a></h4>
      <div id='api_records_user_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>userId</th><td>The numeric, local-unique identifier for the user;</td></tr>
        <tr><th>name</th><td>The user name for this user;</td></tr>
        <tr><th>fullName</th><td>The user's full name;</td></tr>
        <tr><th>email</th><td>The user's email address;</td></tr>
        <tr><th>pictureUrl</th><td>A URL to the user's avatar image;</td></tr>
        <tr><th>profile</th><td>A user-provided description of themselves;</td></tr>
        <tr><th>lastVisit</th><td>The date/time of the user's last visit in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
        <tr><th>lastVisitFor</th><td>The date/time of the user's last visit to their <a href='<?= $this->baseUrl('inbox') ?>'>inbox</a> in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
        <tr><th>totalTags</th><td>The total number of unique tags this user has used;</td></tr>
        <tr><th>totalItems</th><td>The total number of unique sites this user has bookmarked;</td></tr>
        <tr><th>userItemCount</th><td>The total number of unique bookmarks for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
        <tr><th>itemCount</th><td>The total number of unique sites for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
        <tr><th>tagCount</th><td>The total number of unique tags for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_item' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/item') ?>'><a href='<?= $url ?>/api/records/item' data-cache.collapsable='api_records_item_content'>item</a></h4>
      <div id='api_records_item_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>itemId</th><td>The numeric, local-unique identifier for the item;</td></tr>
        <tr><th>url</th><td>The url of the site/item;</td></tr>
        <tr><th>urlHash</th><td>An <?= Connexions::wikipedia_a('MD5') ?> hash of the <a href='<?= $url ?>/api/additionalInformation/normalizedUrl'>normalized url</a>.</td></tr>

        <tr><th>userCount</th><td>The total number of users that have bookmarked this item (<i>cache</i>);</td></tr>
        <tr><th>ratingCount</th><td>The total number of users that have rated this item (<i>cache</i>);</td></tr>
        <tr><th>ratingSum</th><td>The sum of all user ratings for this item (<i>cache</i>);</td></tr>

        <tr><th>userItemCount</th><td>The total number of unique bookmarks for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
        <tr><th>itemCount</th><td>The total number of unique sites for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
        <tr><th>tagCount</th><td>The total number of unique tags for this user and this call (MAY be 0 for some calls indicating that it was not calculated for the call);</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_tag' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/tag') ?>'><a href='<?= $url ?>/api/records/tag' data-cache.collapsable='api_records_tag_content'>tag</a></h4>
      <div id='api_records_tag_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>tagId</th><td>The numeric, local-unique identifier for the tag;</td></tr>
        <tr><th>tag</th><td>The tag name;</td></tr>

        <tr><th>userItemCount</th><td>The total number of unique bookmarks that use this tag;</td></tr>
        <tr><th>itemCount</th><td>The total number of unique sites tagged with this tag;</td></tr>
        <tr><th>tagCount</th><td>Should be 1;</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_bookmark' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/bookmark') ?>'><a href='<?= $url ?>/api/records/bookmark' data-cache.collapsable='api_records_bookmark_content'>bookmark</a></h4>
      <div id='api_records_bookmark_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>userId</th><td>The numeric, local-unique identifier for the owning user;</td></tr>
        <tr><th>itemId</th><td>The numeric, local-unique identifier for the bookmarked item;</td></tr>
        <tr><th>name</th><td>The user-provided name of this bookmark;</td></tr>
        <tr><th>description</th><td>The user-provided, textual description of this bookmark;</td></tr>
        <tr><th>rating</th><td>If non-zero, the rating (1-5) assigned to this site by this user;</td></tr>
        <tr><th>isFavorite</th><td>An indicator of whether or not this bookmark has been marked as a favorite (1 == true, 0 == false);</td></tr>
        <tr><th>isPrivate</th><td>An indicator of whether or not this bookmark has been marked as private (1 == true, 0 == false).
        <p><i>Note that results will only include the private bookmarks of the currently authenticated user</i>.</p></td></tr>
        <tr><th>taggedOn</th><td>The date/time this bookmarked was created in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
        <tr><th>updatedOn</th><td>The date/time this bookmarked was last updated in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
        <tr><th>tags</th><td>An array of tags by <b>tag</b> (tag name);</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_credential' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/credential') ?>'><a href='<?= $url ?>/api/records/credential' data-cache.collapsable='api_records_credential_content'>credential</a></h4>
      <div id='api_records_credential_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>userAuthId</th><td>The numeric, local-unique identifier for the credential;</td></tr>
        <tr><th>userId</th><td>The numeric, local-unique identifier for the associated user;</td></tr>
        <tr><th>name</th><td>The user-selected name for this credential;</td></tr>
        <tr><th>authType</th><td>A string indication of the credential type ('password', 'pki', 'openid');</td></tr>
        <tr><th>credential</th><td>The authentication credential;</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_activity' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/activity') ?>'><a href='<?= $url ?>/api/records/activity' data-cache.collapsable='api_records_activity_content'>activity</a></h4>
      <div id='api_records_activity_content' class='help-content'>
       <table class='record'>
        <tr><th>Property</th><th>Description</th></tr>
        <tr><th>activityId</th><td>The numeric, local-unique identifier for the activity;</td></tr>
        <tr><th>userId</th><td>The numeric, local-unique identifier for the associated user;</td></tr>
        <tr><th>objectType</th><td>The type of object this activity is related to (user, tag, item, bookmark, userAuth);</td></tr>
        <tr><th>objectId</th><td>The numeric, local-unique identifier of the target object (interpreted based upon <tt>objectType</tt>);</td></tr>
        <tr><th>operation</th><td>The operation that was performed upon the target object (save, update, delete);</td></tr>
        <tr><th>time</th><td>The date/time that the operation was performed in the form <?= $idDescriptions['date/time'] ?>;</td></tr>
        <tr><th>properties</th><td>The effected properties of the target object;</td></tr>
       </table>
      </div>
     </li><!-- api-record } -->

     <li class='collapsable api-record'><!-- api-record { -->
      <h4 id='api_records_timeline' class='toggle <?= Connexions_Help::rest_collapsed($this, 'records/timeline') ?>'><a href='<?= $url ?>/api/records/timeline' data-cache.collapsable='api_records_timeline_content'>timeline</a></h4>
      <div id='api_records_timeline_content' class='help-content'>
        <p class='continued'>For a single series, the return object will have the form:</p>
        <pre>
{
     "activity":     {
         "%date/time string%": %count%,
         ...
     }
}
        </pre>

        <p class='continued'>For a multiple series, the return object will have the form:</p>
        <pre>
{
     "%series date/time%": {
         "%period component%": %count%,
         ...
     },
     ...
}
        </pre>
      </div>
     </li><!-- api-record } -->

    </ul><!-- api-records } -->
   </div><!-- api_records } -->

   <div id='api_additionalinformation' class='additional-info'><!-- api_additionalInformation { -->
    <h4>Additional Information</h4>

    <div class='collapsable'><!-- api_additionalInformation_normalizedUrl { -->
     <h5 id='api_additionalinformation_normalizedurl' class='toggle<?= Connexions_Help::rest_collapsed($this, 'additionalInformation/normalizedUrl') ?>'<a href='<?= $url ?>/api/additionalInformation/normalizedUrl' data-cache.collapsable='api_additionalInformation_normalizedUrl_content'>Normalized URL</a></h5>
     <div id='api_additionalInformation_normalizedUrl_content' class='help-content'>
      <p>In order to mitigate issues with various functionally equivalent URLs represented by differing URL string, connexions will normalize the url before generating the URL hash that is used to represent the url.</p>

      <p class='continued'>The normalization process involves the following steps:</p>
      <ol>
       <li>Decode any <tt>%##</tt> encoding as well as converting any <tt>+</tt> characters to space (via PHP <tt>urldecode</tt>);</li>
       <li>Convert the entire URL to lower-case (via PHP <tt>strtolower</tt>);</li>
       <li>Collapse all white-space and trim leading and trailing white-space (via PHP <tt>preg_replace</tt> and <tt>trim</tt>);</li>
       <li>Parse the resulting URL (via PHP <tt>parse_url</tt>);</li>
       <li>Generate a new, <?= Connexions::wikipedia_a('URI_scheme#Generic_syntax', 'normalized URI') ?> according to <?= Connexions::rfc_a('3986#section-6', 'RFC 3986, section 6') ?>:
        <ul>
         <li><b>scheme</b>, <b>host</b>, <b>user</b>, <b>pass</b>, <b>fragment</b> &mdash; no further normalization;</li>
         <li><b>port</b> &mdash; convert any value to an <tt>integer</tt> and, per <?= Connexions::rfc_a('3986#section-6.2.3', 'RFC 3986, section 6.2.3') ?>, remove it if it is the default port for the scheme (e.g. 80 for http, 443 for https);</li>
         <li><b>path</b>
          <ol>
           <li>collapse and trim all white-space;</li>
           <li>convert any <tt>\</tt> to <tt>/</tt>;</li>
           <li>make the path absolute, collapsing all <tt>.</tt> and <tt>..</tt> portions of the path;</li>
          </ol>
         </li>

         <li><b>query</b>
          <ol>
           <li>Collapse and trim all white-space;</li>
           <li>Ensure a normalized order for query parameters (via PHP <tt>parse_str</tt> and <tt>ksort</tt>);</li>
           <li>Re-build the query (via PHP <tt>http_build_query</tt>);</li>
          </ol>
         </li>
        </ul>
       </li>
      </ol>
     </div>
    </div><!-- api_additionalInformation_normalizedUrl } -->

    <div class='collapsable'><!-- api_additionalInformation_timelineGrouping { -->
     <h5 id='api_additionalinformation_timelinegrouping' class='toggle<?= Connexions_Help::rest_collapsed($this, 'additionalInformation/timelineGrouping') ?>'<a href='<?= $url ?>/api/additionalInformation/timelineGrouping' data-cache.collapsable='api_additionalInformation_timelineGrouping_content'>Timeline Grouping</a></h5>
     <div id='api_additionalInformation_timelineGrouping_content' class='help-content'>
      <p class='continued'>When retrieving a timeline, the results can be grouped into one or more series.  These groupings are defined by a structured string of the form <tt>p[:b]</tt> where <tt>p</tt> may be any reasonable combination of:</p>
      <table>
       <tr><th>H</th><td>Hour        (00-23);</td></tr>
       <tr><th>D</th><td>Day         (01-31);</td></tr>
       <tr><th>d</th><td>Day-of-week (0 == Sunday - 6 == Saturday);</td></tr>
       <tr><th>W</th><td>Week        (0-52, beginning on Monday);</td></tr>
       <tr><th>w</th><td>Week        (0-52, beginning on Sunday);</td></tr>
       <tr><th>M</th><td>Month       (00-12);</td></tr>
       <tr><th>Y</th><td>Year;</td></tr>
      </table>

      <p><tt>b</tt> is a single character indicating that the timeline information should be grouped into one or more series where each series is identified by <tt>p</tt>.  <tt>b</tt> is any single character valid for <tt>p</tt> that also makes sense as the final period/count component of a series.</p>

      <p class='continued'>For example:</p>
      <table>
       <tr><th>YMDH</th><td>indicates a timeline comprised of all counts by year/month/day/hour with a single series</td></tr>
       <tr><th>YMD:H</th><td>indicates a timeline comprised of a series of counts by hour for each measured year/month/day;</td></tr>
       <tr><th>YMD</th><td>indicates a timeline comprised of all counts by year/month/day with a single series</td></tr>
       <tr><th>YM:D</th><td>indicates a timeline comprised of a series of counts by day for each measured year/month;</td></tr>
      </table>
     </div>
    </div><!-- api_additionalInformation_timelineGrouping } -->

   </div><!-- api_additionalInformation } -->

  </div><!-- api } -->
 </li><!-- api-li } -->
</ul>
<script type='text/javascript'>
(function($) {
    var tabsId          = 'help';
    var $tabs           = $('#'+ tabsId);
    // The parent of the section original requested via url path.
    var sectionParent   = '<?= $jsParentId ?>';
    var sectionId       = '<?= $jsSectionId ?>';
    var tabId           = 'help-developers';

    function firstShow(e, ui)
    {
        // Establish localNavigation
        $('#'+ tabId).localNavigation('<?= $url ?>');

        // If OUR tab is being shown...
        var panelId = $(ui.panel).attr('id');
        if ((panelId === tabId) && (sectionId.length > 0))
        {
            // ... scroll to the target section
            var $el     = $('#'+ tabId +' #'+ sectionId);
            var $parent = (sectionParent.length > 0
                            ? $('#'+ tabId +' #'+ sectionParent)
                            : $el);
            if (($parent.length === 1) && ($el.length === 1))
            {
                window.setTimeout(function() {
                    $.scrollTo( $parent, {
                        duration:   800,
                        onAfter:    function() {
                            $el.parent().effect('highlight', null, 2000);
                        }
                    });
                }, 100);
            }
        }

        $tabs.unbind('tabsshow', firstShow);
    }

    // Bind to the 'tabsshow' event indicating the the tabs widget is ready
    $tabs.bind('tabsshow', firstShow);
 }(jQuery));
</script>
