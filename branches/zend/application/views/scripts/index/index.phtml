<?php
/** @file
 *
 *  View script for IndexController::index with incoming members:
 *      viewer          The Model_User instance representing the current
 *                      viewer;
 *      owner           The owner of the current item set -- either a string
 *                      or a Model_User instance;
 *      tagInfo         A Connexions_Set_Info instance containing
 *                      information about the requested tags;
 *      userItems       The Model_UserItemSet representing the items to
 *                      present;
 *      paginator       The paginator to use in presenting 'userItems';
 *
 *      itemsStyle      Presentation style for user items
 *                      (Connexions_View_Helpers_HtmlUserItems::STYLE_*);
 *      itemsSortBy     Sort User Items by
 *                      (a field from Model_UserItem::$model);
 *      itemsSortOrder  User Items sort order
 *                      (Connexions_View_Helpers_HtmlUserItems::
 *                                                          SORT_ORDER_*);
 *
 *      tagsMax         Maximum number of tags to present;
 *      tagsSortBy      Sort tags by (valid field of Model_Tag);
 *      tagsSortOrder   Tag sort order.
 */
$baseUrl = $this->baseUrl('/'); //Connexions::url('/');

$links = $this->headLink();
$links->appendStylesheet($baseUrl .'css/userItems.css');

if ($this->owner !== '*')
    $this->headTitle($this->owner ."'s Bookmarks");
else
    $this->headTitle('Bookmarks')

?>
<div class='columnHeader'>
 <p>Present the Bookmarks for <?= $this->owner ?>
                          to  <?= $this->viewer ?>
  <?php
    if ( $this->tagInfo->hasValidItems())
        printf (" with tags '%s'", $this->tagInfo->validItems);
    else
        printf (", NO tags.");
  ?>
 </p>
</div>

<form id='userItems' action='<?php echo $this->url(array('controller' => 'tagged')); ?>'>
<?php
if ( @isset($this->userItems) )
{
    /* If $this->tagList is NOT set and we have 1 or more userItems, make use
     * of the 'userItems' Model_UserItemSet instance to retrieve the tags for
     * these userItems (specifically, for the unique items and unique users
     * represented by these userItems).
     */
    if ((! @isset($this->tagList)) && (count($this->userItems) > 0))
    {
        $userIds = $this->userItems->userIds();

        // Create a tag set and then retrieve its Tag_ItemList adapter
        $tagSet        = new Model_TagSet( $userIds,
                                           $this->userItems->itemIds() );
        if ($this->owner === '*')
            $tagSet->withAnyUser();

        /*
        Connexions::log(
                sprintf("View Index: %s users, tag sql[ %s ]",
                            ($this->owner === '*' ? '*' : count($userIds)),
                            $tagSet->select()->assemble()));
        // */

        $this->tagList = $tagSet->get_Tag_ItemList(0, $this->tagsMax,
                                                   $this->tagInfo,
                                                   ($this->owner !== '*'
                                                        ? null
                                                        : '/tagged'));
    }
}

if ( @isset($this->tagList))
{
    $time_start = microtime(true);

    $html = "<div class='columnHeader'>"
          .  "<p>Tag's shared by all the currently presented items.</p>"
          . "</div>";

    /* Use the Connexions_View_Helper_HtmlTagCloud class to render the tag
     * cloud for $this->tagList.
     */
    $html .= $this->htmlTagCloud($this->tagList,
                                 $this->tagsSortBy,
                                 $this->tagsSortOrder);

    $time_end   = microtime(true);
    $html .= sprintf ("%f seconds to render tag cloud<br />\n",
                      $time_end - $time_start);

    $this->layout()->right = $html;
}

/* Present the pagination control, established by
 * Bootstrap.php::_initViewGlobal() to be rendered via:
 *      views/scripts/paginationControl.phtml
 */
if (@isset($this->paginator))
{
    echo $this->htmlUserItems($this->paginator,
                              $this->owner,
                              $this->viewer,
                              $this->tagInfo,
                              $this->itemsStyle,
                              $this->itemsSortBy,
                              $this->itemsSortOrder);
}

?>
</form>


<div class='error'><?= (@isset($this->error) ? $this->error : '') ?></div>
