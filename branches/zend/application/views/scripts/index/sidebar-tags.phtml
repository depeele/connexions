<?php
/** @file
 *
 *  View script for IndexController::index to render the tags portion of the
 *  sidebar (i.e. the 'Tags' tab).
 *
 *  Incoming members:
 *      url             The full url for the main controller of this page;
 *      sidebar         An array of settings for the sidebar:
 *          namespace       The cookie/parameters/settings namespace for the
 *                          sidebar [ 'sidebarTab' ];
 */

?>
  <div class='columnHeader'>
   <div class='context-bg connexions_sprites tag_bg ui-corner-left'>
    &nbsp;
   </div>
   <p>Tags related to these bookmarks.</p>
  </div>
  <?php

    $htmlSidebar = $this->htmlSidebar( $this->sidebar );
    $config      = $htmlSidebar->getPane('tags');

    /*
    Connexions::log("index/sidebar-tags.phtml: config[ %s ]",
                    print_r($config, true));
    // */

    $service = Connexions_Service::factory('Model_Tag');

    $perPage    = $config['perPage'];
    $page       = $config['page'];
    if ($perPage < 1)   $perPage = 100;
    if ($page    < 1)   $page    = 1;

    $count      = $perPage;
    $offset     = ($page - 1) * $perPage;

    /* Order by userItem/Bookmark count here so the most used will be in the
     * limited set.  User-requested sorting will be performed later
     * (in View_Helper_HtmlItemCloud) before the cloud is rendered.
     */
    $fetchOrder = array('userItemCount DESC',
                        'userCount     DESC',
                        'itemCount     DESC',
                        'tag           ASC');

    if (count($this->tags) < 1)
    {
        /* There were no requested tags that limited the bookmark retrieval so,
         * for the sidebar, retrieve ALL tags...
         */

        /*
        Connexions::log("sidebar-tags.phtml: ALL tags for '%s' [%d..%d]",
                        $this->owner, $offset, $offset+$count);
        // */

        $tagSet     = $service->fetchByUsers(($this->owner === '*'
                                                ? null          // ALL users
                                                : $this->owner),// ONE user
                                             $fetchOrder,
                                             $count,
                                             $offset);
    }
    else
    {
        // Tags related to the given bookmarks
        $items = $htmlSidebar->items;

        /* If there have been no bookmarks/items communicated to the
         * htmlSidebar helper (e.g. this is invoked as a partial and
         *                          index.phtml has not been rendered),
         * then we need to generate the appropriate set now, assuming the
         * controller has filled in $this->main for the configuration of the
         * main view.
         */
        if ($items === null)
        {
            /* Yuck.  We're gonna have to use the View_Helper_HtmlBookmarks
             * view helper in order to establish context.  This will add
             * inappropriate on-load actions that we need to exclude.
             */
            $jQuery = $this->jQuery();
            $sbLoad = $jQuery->getOnLoadActions();

            $htmlBookmarks = $this->htmlBookmarks( $this->main );
            $items         = $htmlBookmarks->bookmarks;

            $htmlSidebar->items = $items;

            /*
            Connexions::log("sidebar-tags.phtml: Clear on-load actions "
                            .   "added by View_Helper_Bookmarks");
            // */

            $jQuery->clearOnLoadActions();
            foreach ($sbLoad as $action)
            {
                /*
                Connexions::log("sidebar-tags.phtml: "
                                .   "Re-add on-load action [ %s ]",
                                $action);
                // */

                $jQuery->addOnloadAction($action);
            }
        }

        /*
        Connexions::log("sidebar-tags.phtml: bookmarks-related [%d..%d]",
                        $offset, $offset+$count);
        // */

        $tagSet = $service->fetchByBookmarks( $items,
                                              $fetchOrder,
                                              $count,
                                              $offset );
    }

    $config['items']    =& $tagSet;
    $config['selected'] =& $this->tags;
    //$config['itemType'] = View_Helper_HtmlItemCloud::ITEM_TYPE_TAG;

    $htmlItemCloud = $this->htmlItemCloud($config);

    echo $htmlItemCloud->render();
