<?php
/** @file
 *
 *  HTML rendering of Item Cloud items.
 *
 *  Incoming parameters:
 *      helper          The View_Helper_HtmlItemCloudItem instance;
 *      items           The Connexions_Set_ItemList instance representing the
 *                      items to be presented.
 *
 *  The 'helper' provides access to the following:
 *      getShowControls()   Whether or not management controls should be
 *                          presented (i.e. the viewer is also the owner of the
 *                                          items being presented);
 *      getItemType()       The type of item being presented
 *                          (View_Helper_HtmlItemCloud::ITEM_TYPE_*);
 *      getClassList()      The set of classes to use for the different tag
 *                          weights;
 *      getHtmlTags()       The HTML tag information to use for rendering;
 *      getEncoding()       The current HTML encoding value;
 *      getFontSizeUnit()   The font-size unit to use
 *                          (iff there are no CSS classes defined for tag
 *                           weights);
 */
$helper       = $this->helper;
$showControls = $helper->getShowControls();
$itemType     = $helper->getItemType();
$fontUnit     = null;
$classList    = $helper->getClassList();
if ($classList === null)
{
    $fontUnit = $helper->getFontSizeUnit();
}

// Process the HTML tags once
$tags = array();
$enc  = $helper->getEncoding();
foreach ($helper->getHtmlTags() as $key => $data)
{
    if (is_array($data))
    {
        $htmlTag    = $key;
        $attributes = '';

        foreach ($data as $param => $value)
        {
            $attributes .= ' '
                       . $param . '="'
                       .    htmlspecialchars($value, ENT_COMPAT, $enc)
                       . '"';
        }
    }
    else
    {
        $htmlTag    = $data;
        $attributes = '';
    }

    array_push($tags, array('tag'   => $htmlTag,
                            'attrs' => $attributes));
}

if ($itemType === View_Helper_HtmlItemCloud::ITEM_TYPE_USER)
{
    //$showControls = false;

    $viewer        = $helper->getViewer();
    $showRelations = ( ($showControls === true)  &&
                       is_object($viewer)        &&
                       ($viewer->isAuthenticated()) );

    if (! $showRelations)
    {
        $showControls = false;
    }
}

// /*
Connexions::log('view/scripts/itemCloud_item: '
                . 'showControls[ %s ], '
                . 'fontUnit[ %s ], '
                . 'classList[ %s ], '
                . 'HTML tags[ %s ]',
                Connexions::varExport($showControls),
                Connexions::varExport($fontUnit),
                Connexions::varExport($classList),
                Connexions::varExport($tags));
// */


// Generate HTML results
foreach ($this->items as $item)
{
    $url        = $item->getParam('url');
    $title      = $item->getTitle();
    $weight     = number_format($item->getWeight());
    $isSelected = ($item->getParam('selected') === true);
    $cssClass   = ($isSelected
                        ? 'item selected ui-corner-all ui-state-highlight '
                        : 'item ');
    $weightVal  = $item->getParam('weightValue');
    $attributes = "data-id='{$item}'";

    /*
    Connexions::log('view/scripts/itemCloud_item: '
                    . 'title[ %s ], url[ %s ], '
                    . 'weight[ %s ], weight value[ %s ], '
                    . '%sselected',
                    $title, $url,
                    $weight, $weightVal,
                    ($isSelected ? '' : 'NOT '));
    // */

    if ($classList === null)
    {
        $attributes .= sprintf(' style="font-size: %d%s;"',
                                $weightVal, $fontUnit);
    }
    else
    {
        $cssClass .= htmlspecialchars($weightVal, ENT_COMPAT, $enc);
    }

    if (! empty($cssClass))
        $cssClass = ' class="'. $cssClass .'"';

    $itemContent = $title;
    if (empty($url))
    {
        $itemHtml = sprintf('<span title="%s" %s%s>%s</span>',
                            $weight,
                            $cssClass,
                            $attributes,
                            $itemContent);
    }
    else
    {
        $itemHtml = sprintf('<a href="%s" title="%s" %s%s>%s</a>',
                            htmlspecialchars($url, ENT_COMPAT, $enc),
                            $weight,
                            $cssClass,
                            $attributes,
                            $itemContent);
    }

    if ($showControls === true)
    {
        $show     = array(
            'add'   => false,
            'edit'  => false,
            'del'   => false,
        );

        $itemHtml .= '<div class="control">';
        if ( $showRelations )
        {
            // Show user relations
            $relation = $viewer->networkRelation( $item );

            if (empty($relation) || in_array('none', $relation))
            {
                $relationStr = 'no relation';
                $spriteCss   = 'relation-none';
                $show['add'] = true;
            }
            else if (in_array('self', $relation))
            {
                $relationStr = 'you';
                $spriteCss   = 'relation-self';
            }
            else if (in_array('mutual', $relation))
            {
                $relationStr = 'mutual followers';
                $spriteCss   = 'relation-mutual';
                $show['del'] = true;
            }
            else if (in_array('amIn', $relation))
            {
                $relationStr = 'follower';
                $spriteCss   = 'relation-amIn';
                $show['add'] = true;
            }
            else
            {
                $relationStr = 'following';
                $spriteCss   = 'relation-isIn';
                $show['del'] = true;
            }

            $itemHtml .=  "<div class='relation' title='{$relationStr}'>"
                      .    "<!-- ". implode(' ', $relation) ." -->"
                      .    "<div class='connexions_sprites {$spriteCss}'>"
                      .    $relationStr
                      .    "</div>"
                      .   "</div>";
        }
        else
        {
            $show['edit'] = true;
            $show['del']  = true;
        }

        if ($show['edit'])
        {
            $itemHtml .=  '<span class="item-edit" title="edit">'
                      .      '<span class="title">EDIT</span>'
                      .      '<span class="icon connexions_sprites '
                      .                                  'item-edit">'
                      .      '</span>'
                      .   '</span>';
        }
        if ($show['add'])
        {
            $itemHtml .=  '<span class="item-add" title="add">'
                      .      '<span class="title">ADD</span>'
                      .      '<span class="icon connexions_sprites '
                      .                                  'item-add">'
                      .      '</span>'
                      .   '</span>';
        }
        if ($show['del'])
        {
            $itemHtml .=  '<span class="item-delete" title="delete">'
                      .      '<span class="title">DELETE</span>'
                      .      '<span class="icon connexions_sprites '
                      .                                  'item-delete">'
                      .      '</span>'
                      .   '</span>';
        }

        $itemHtml .= '</div>';
    }


    /*
    Connexions::log("view/scripts/itemCloud_item: "
                    . "title[ %s ], weight[ %s ], weight title[ %s ]",
                    $title,
                    $item->getWeight(),
                    $weight);
    // */

    foreach ($tags as $html)
    {
        $itemHtml = sprintf('<%1$s%3$s>%2$s</%1$s>',
                           $html['tag'], $itemHtml, $html['attrs']);
    }

    echo $itemHtml;
}
