<?php
/** @file
 *
 *  This is used to begin the streaming output of import results.
 *  The incoming view parameters should be:
 *      state       The current processing state
 *
 *  In-stream output is generated by:
 *      post-bookmarks-import-stream-begin.phtml        // Begin the stream
 *      post-bookmarks-import-stream-bookmark.phtml     // valid bookmark
 *      post-bookmarks-import-stream-error.phtml        // import error
 *      post-bookmarks-import-stream-warning.phtml      // import warning
 *
 *  The stream is ended with:
 *      post-bookmarks-import.phtml                     // Final results
 */

$tagStr     = implode(', ', $this->state['tagStack']);
$tagLabel   = 'tag' .(count($this->state['tagStack']) > 1 ? 's' : '');

$test       = ($this->state['test'] === 'yes'
                ? 'Testing '
                : '');
$visibility = $this->state['visibility'];
$conflict   = ($this->state['conflict'] === 'replace'
                ? 'replacing'
                : 'keeping');

$links = $this->headLink();
$links->appendStylesheet($this->baseUrl('/css/settings.css'))
      ->appendStylesheet($this->baseUrl('/css/bookmarks.css'));

$this->headTitle("Import");

/* Include the base-header information directly.
 *
 * Since layouts have been disabled, we must explicitly include these.
 */
echo $this->render('base-header.phtml');

?>
<div id='bookmark-import-results'>
 <h3><?= $test ?>Import of bookmarks using default <?= $tagLabel ?>
        <span class='tags'><?= $tagStr ?></span>,
    default visibility of
        <span class='privacy <?= $visibility ?>'><?= $visibility ?></span>,
    <?= $conflict ?> existing bookmarks.</h3>
 <div class='import-status'>
  <table>
   <thead>
    <tr>
     <th>lines</th><td id='line-count'>0</td>
     <th colspan='2'><a href='#imported'
                       title='Imported Bookmarks'>imported</a></th>
     <th rowspan='2'><a href='#ignored'
                       title='Ignored Bookmarks'>ignored</a></th>
     <th rowspan='2'><a href='#error'
                       title='Import Errors'>errors</a></th>
     <th rowspan='2'><a href='#warning'
                       title='Import Warnings'>warnings</a></th>
    </tr>
    <tr>
     <th>folders</th><td id='folder-count'>0</td>
     <th><a href='#new' title='New Bookmarks'>new</a></th>
     <th><a href='#updated' title='Updated Bookmarks'>updated</a></th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <th><a href='#all' title='All Items'>bookmarks</a></th>
     <td id='bookmarks-count'>0</td>
     <td id='bookmarks-new'>0</td>
     <td id='bookmarks-updated'>0</td>
     <td id='bookmarks-ignored'>0</td>
     <td id='bookmarks-error'>0</td>
     <td id='bookmarks-warning'>0</td>
    </tr>
    <tr>
     <td colspan='7'>
      <div id='progressbar'></div>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <?php
 if ($this->state['test'] === 'yes')
 {
     ?>
 <p class='note'><b>Note:</b> Once you're satisfied with the results of the test import, select "No, just do it!" above and then click "Import" again.</p>
     <?php
 }
 ?>
 <h3 id='filter-label' style='visibility:hidden;'>Imported Bookmarks</h3>
 <script type='text/javascript'>
(function($) {
    var $status     = $('.import-status');
    var $label      = $('#filter-label');
    var $container  = $('#bookmark-import-results');
    var $items      = null; // Cache of loaded items
    var timeout     = null;
    var $stats      = {
        progress:           $status.find('#progressbar').progressbar(),
        lineCount:          $status.find('#line-count'),
        folderCount:        $status.find('#folder-count'),
        bookmarksCount:     $status.find('#bookmarks-count'),
        bookmarksNew:       $status.find('#bookmarks-new'),
        bookmarksUpdated:   $status.find('#bookmarks-updated'),
        bookmarksIgnored:   $status.find('#bookmarks-ignored'),
        bookmarksError:     $status.find('#bookmarks-error'),
        bookmarksWarning:   $status.find('#bookmarks-warning')
    };

    //$status.delegate('a', 'click', function(e)
    $status.find('a').click( function(e) {
        e.preventDefault();
        e.stopPropagation();

        if (timeout !== null)
        {
            clearTimeout(timeout);
            timeout = null;
        }

        var $a      = $(this);
        var type    = $a.attr('href').replace('#', '');

        // Hide all element EXCEPT those with a CSS class of 'type'
        var label   = $a.attr('title');
        var $show   = null;
        if (type !== 'all')
        {
            $show  = $items.filter('.'+ type);
            label += ' ('+ $show.length +' items)';
        }

        // Separate the visibility filtering from the UI thread.
        $container.mask();
        timeout = setTimeout(function() {
            timeout = null;
            if ($show === null)
            {
                // Show ALL
                $label.css('visibility', 'hidden');
                $items.show();
            }
            else
            {
                // Show JUST a specific type
                $label.text( label )
                      .css('visibility', 'visible');
                $show.show();
                $items.filter(':not(.'+ type +')').hide();
            }

            $container.unmask();
        }, 1);
    });

    $.bookmarksImport_update = function( state, isFinal ) {
        /* If this is a valid bookmark, state.html will be the server-renderd
         * version of the bookmark.
         */
        var complete    = (state.filePos / state.fileSize) * 100;
        $stats.progress.progressbar('value', complete);

        $stats.lineCount.text(state.lineNum);
        $stats.folderCount.text(state.numFolders);
        $stats.bookmarksCount.text(state.numBookmarks);
        $stats.bookmarksNew.text(state.numNew);
        $stats.bookmarksUpdated.text(state.numUpdated);
        $stats.bookmarksIgnored.text(state.numIgnored);
        $stats.bookmarksError.text(state.numErrors);
        $stats.bookmarksWarning.text(state.numWarnings);

        if (isFinal === true)
        {
            $.log('bookmarksImport_update: isFinal -- '
                    + 'remove scripts from ul.items');

            // Remove all scripts from the final list
            var $ul = $container.children('ul.items');
            $ul.children('script').remove();

            // Cache the list of items
            $items = $ul.children('li');
        }
    };
}(jQuery));
 </script>
 <ul class='items bookmarks'>
