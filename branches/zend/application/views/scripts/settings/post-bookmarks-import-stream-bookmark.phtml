<?php
/** @file
 *
 *  This is used for in-process output of a successfully processed bookmark.
 *  The incoming view parameters should be:
 *      state       The current processing state
 *      importState The import state of this bookmark
 *                      ('ignored' | 'new' | 'updated')
 *      bookmark    The processed bookmark instance
 *
 *  In-stream output is generated by:
 *      post-bookmarks-import-stream-begin.phtml        // Begin the stream
 *      post-bookmarks-import-stream-bookmark.phtml     // valid bookmark
 *      post-bookmarks-import-stream-error.phtml        // import error
 *      post-bookmarks-import-stream-warning.phtml      // import warning
 *
 *  The stream is ended with:
 *      post-bookmarks-import.phtml                     // Final results
 */
$bookmark =& $this->bookmark;

$css = array('mine', $this->importState);
if ($this->importState !== 'ignored')   array_push($css, 'imported');

if ($bookmark->isFavorite)  array_push($css, 'favorite');
if ($bookmark->isPrivate)   array_push($css, 'private');

?>
  <li class='item <?= implode(' ', $css) ?>'><?php // item { ?>
   <div class='bookmark'><?php // bookmark { ?>
    <div class='status'><?php // status {

    /*****************************
     * Status
     *
     */
    ?>
     <div class='favorite'>
        <?php
        $css   = array('connexions_sprites');

        if ($bookmark->isFavorite)
        {
            array_push($css, 'star_fill');
            $title = 'Favorite';
        }
        else
        {
            array_push($css, 'star_empty');
            $title = 'Not a favorite';
        }

        /*
      <input type='checkbox'
             name='isFavorite'
             value='true'<?= ($bookmark->isFavorite
                                ? " checked='true'"
                                : '') ?> />
        // */
        ?>
      <div class='<?= implode(' ', $css) ?>'
           title='<?= $title ?>'>&nbsp;</div>
     </div>
     <div class='private'>
      <?php
        $css   = array('connexions_sprites');

        if ($bookmark->isPrivate)
        {
            array_push($css, 'lock_fill');
            $title = 'Private';
        }
        else
        {
            array_push($css, 'lock_empty');
            $title = 'Public';
        }

        /*
      <input type='checkbox'
             name='isPrivate'
             value='true'<?= ($bookmark->isPrivate
                                ? " checked='true'"
                                : '') ?> />
        // */
         ?>
      <div class='<?= implode(' ', $css) ?>'
           title='<?= $title ?>'>&nbsp;</div>
     </div>
    </div><?php // status } ?>
    <div class='stats'><?php // stats {
        /*
        $countValue = $bookmark->item->userCount;
        $countTitle = 'user'. ($countValue !== 1 ? 's' : '');
        $href       = $this->url(array(
                                    'action'  => 'url',
                                    'urlHash' => $bookmark->item->urlHash
                                ));

        ?><a class='count ui-corner-bottom'
             title='<?= $countTitle ?>'
              href='<?= $href ?>'><?= $countValue ?></a><?php
        */

        ?><div class='rating'><?php   // rating {

        /*
        $ratingAvg = (isset($bookmark->item->ratingAvg)
                        ? $bookmark->item->ratingAvg
                        : ($bookmark->item->ratingCount > 0
                            ? ($bookmark->item->ratingSum /
                               $bookmark->item->ratingCount)
                            : 0.0)
                     );

        if ($ratingAvg > 0.0)
        {
            $count       = $bookmark->item->ratingCount;
            $ratingTitle = sprintf ("%d rater%s, %5.2f avg.",
                                    $count,
                                    ($count === 1 ? '' : 's'),
                                    $ratingAvg);
        }
        else
        {
            $ratingTitle = 'No ratings';
        }
        // */

        printf ("<div class='stars'>%s</div>",
                $this->htmlStarRating($bookmark->rating, 'owner') );

        ?></div><?php // rating } ?>
    </div><?php // stats }

    /*****************************
     * Bookmark Data
     *
     */
    ?>
    <div class='data'><?php  // data {

    /*****************************
     * Item Name
     *
     */
    ?><h4 class='itemName'><a
            href='<?= $bookmark->item->url ?>'
           title='<?= $bookmark->item->urlHash ?>'
            ><?= htmlspecialchars($bookmark->name) ?></a></h4><?php

    /*****************************
     * Item Url
     *
     */
    ?><div class='url'><a
            href='<?= $bookmark->item->url ?>'
           title='<?= $bookmark->item->urlHash ?>'
            ><?= $bookmark->item->getTitle() ?></a></div><?php

    /*****************************
     * Item Description
     *
     */
    ?><div class='description'><?php    // description {

    $text = htmlspecialchars($bookmark->description);

    ?><div class='full'><?= $text ?></div><?php
    ?></div><?php                       // description }

    ?><div class='meta'><?php   // meta {

    /*****************************
     * Item Tags
     *
     */
     ?><ul class='tags'><?php

    foreach ($bookmark->tags as $tag)
    {
        $tagUrl = $this->url(array('action' => 'index',
                                   'owner'  => $bookmark->user->name,
                                   'tag'    => $tag->tag));

        $cssExtra = ( ($highlightTags !== null) &&
                      (strpos($highlightTags, $tag->tag) !== false)
                        ? ' highlight'
                        : '');

        ?><li class='tag<?= $cssExtra ?>'><a 
                href='<?= $tagUrl ?>'><?= $tag->tag ?></a></li><?php
    }

     ?></ul><?php

    /*****************************
     * Item Dates
     *
     */
     ?><div class='dates'><?php   // dates {
      ?><div class='tagged'
             title='Date tagged'><?= $bookmark->taggedOn ?></div><?php
      ?></div><?php   // dates }
     ?></div><?php   // meta }

   ?>
    </div><?php // data } ?>
    <div class='import-stats'><?php // import-stats { ?>
     <div class='import-lines'>
      <?php
        if ($this->state['firstLine'] == $this->state['lastLine'])
        {
            printf ("Line %d: ", $this->state['firstLine']);
        }
        else
        {
            printf ("Lines %d - %d: ",
                    $this->state['firstLine'],
                    $this->state['lastLine']);
        }
      ?>
     </div>
     <div class='state'><?= $this->importState ?></div>
    </div><?php // import-stats } ?>
   </div><?php // bookmark } ?>
  </li><?php // item } ?>
  <script type='text/javascript'>
(function($) {
    // Update the stats
    $.bookmarksImport_update( <?= Zend_Json::encode($this->state) ?> );
 }(jQuery));
  </script>
