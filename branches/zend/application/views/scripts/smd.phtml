<?php
/** @file
 *
 *  Provide a common infrastructure for Zend Server instances that make use of
 *  Service Mapping Description (SMD).
 *
 *  Incoming parameters:
 *      server      The Zend Server instance;
 *
 *      title       The title to present in the column header;
 *
 *      group       If provided, group ALL services under a single section with
 *                  this name;
 *      urlMethod   If set, include the RPC Method in the URL;
 *      urlParams   If set, on GET, include the RPC parameters as query
 *                  parameters, otherwise as a JSON String;
 *      jsonRpc     If set, include a 'jsonRpc' checkbox for GET;
 */
$this->headLink()->appendStylesheet($this->baseUrl('/css/api.min.css'));

$jQuery = $this->jQuery();
$jQuery->addJavascriptFile($this->baseUrl('js/jsDump.js'))
       ->javascriptCaptureStart();
?>
(function($) {
    var serviceMap  = <?= ($this->server
                            ? $this->server->getServiceMap()
                            : null) ?>;
    var rpcId       = 1;
    var urlMethod   = <?= (isset($this->urlMethod)
                            ? json_encode($this->urlMethod)
                            : 'false') ?>;
    var urlParams   = <?= (isset($this->urlParams)
                            ? 'true'
                            : 'false') ?>;
    var useJsDump   = true;
    var rawData     = null;
    var $services   = null;
    var $results    = null;
    var $clear      = null;
    var $result     = null;
    var $serviceUl  = null;

    // Format 'data' according to 'useJsDump'
    function data2html(data)
    {
        if (data === undefined) data    = rawData;
        else                    rawData = data;

        // :XXX: Firefox (at least 3.6.17) has issues with jsDump()
        var tries   = 0;
        var html    = '';
        while ((data !== null) && (++tries < 3))
        {
            try {
                html = (useJsDump === true
                            ? jsDump.parse( data )
                            : JSON.stringify(data, null, '  ')
                                   .replace(/</, '&lt;')
                                   .replace(/>/, '&gt;')
                                   .replace(/&/, '&amp;') );
                break;
            } catch(e) {
                // Disable jsDump
                useJsDump = -1;
            }
        }

        return html;
    }

    /** @brief  On form submission, generate and initiate a Json-RPC.
     *  @param  e   The form submit event.
     *
     *  Usage: $('form').bind('submit', rpc_submit)
     *                  .bind('success',
     *                        function(e, data, txtStatus, req) ... )
     *                  .bind('error',
     *                        function(e, txtStatus, req) ... );
     *
     *  By default, result data will be presented in the div with
     *  id 'result'
     */
    function rpc_submit(e)
    {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();

        var $form   = $(e.target);
        var url     = $form.attr('action'); //document.location.href;
        
        /*
        url = url.substr(0, url.lastIndexOf('/')+1)
            + $form.attr('action');
        // */

        // Assemble the Json-RPC structure
        var rpc = {
            version: 2.0,
            method:  $form.find('input[name=method]').val(),
            id:      rpcId++,
            params:  {
            }
        };

        // Include all parameters
        $form.find('input:not(:hidden,:submit)').each(function() {
            var $field  = $(this);

            switch ($field.attr('type'))
            {
            case 'checkbox':
            case 'radio':
                rpc.params[ $field.attr('name') ] =
                                            $field.attr('checked');
                break;

            default:
                rpc.params[ $field.attr('name') ] = $field.val();
                break;
            }
        });

        var jsonRpc = $form.find('#jsonRpc').is(':checked');
        var reqType = $form.attr('method');
        var reqUrl  = url;  //$form.attr('action');
        var reqData;

        if ( (urlMethod === true) ||
             ($.isArray(urlMethod) && ($.inArray(reqType, urlMethod) >= 0)) )
        {
            reqUrl  += rpc.method.replace('_', '/');
        }

        if (reqType === 'GET')
        {
            if (jsonRpc)
            {
                reqData  = {
                    'jsonRpc': JSON.stringify(rpc)
                };
            }
            else if (urlParams === true)
            {
                reqData = rpc.params;
            }
            else
            {
                reqData = JSON.stringify(rpc);
            }
        }
        else
        {
            reqData = JSON.stringify(rpc);
        }


        // Invoke the Json-RPC
        var overflow    = $result.css('overflow');
        var hasCallback = ((rpc.params.callback !== undefined) &&
                           (rpc.params.callback.length > 0));
        $result.css('overflow', 'hidden').mask();
        $.ajax({
            type:     reqType,
            url:      reqUrl,
            data:     reqData,
            dataType: 'json',
            dataFilter: function(data, type) {
                if (hasCallback)
                {
                    data = data.replace(rpc.params.callback +'(', '')
                               .replace(/\);$/, '');
                }
                return data;
            },
            success: function(data, txtStatus, req) {
                $form.trigger('success', [data, txtStatus, req]);

                var html    = '<h4 class="success">'
                            +  rpc.method +': '+ txtStatus
                            + '</h4>';

                if (hasCallback)
                {
                    html += '<div class="callback">'
                         +      'callback: '+ rpc.params.callback
                         +  '</div>';
                }

                html += '<pre>'+ data2html(data) +'</pre>';
                $result.html( html );
            },
            error: function(req, txtStatus, e) {
                $form.trigger('error', [txtStatus, req]);

                // /*
                $result.html(  '<h3 class="error">'
                             +  rpc.method +': '+ txtStatus
                             + '</h3>');
                // */
            },
            complete: function() {
                $result.unmask()
                       .css('overflow', overflow);
            }
        });
    }

    /** @brief  Given a service description, generate a matching form
     *          for that service.
     *  @param  service     The service description:
     *                          { envelope:     'JSON-RPC-2.0',
     *                            transport:    'POST',
     *                            parameters:   [
     *                              {type:      %string%,
     *                               name:      %parmater name%,
     *                               optional:  true/false,
     *                               default:   %default value%
     *                              },
     *                              ...
     *                             ],
     *                             returns:     [ ... ]
     *                          }
     *
     *  @return HTML for this method.
     */
    function buildForm(name, info, target)
    {
        var parts   = name.split(/[\._]/);
        var lTmpl   = '<li><h4>%method_label%</h4>'
                    +  '<form method="%transport%" '
                    +        'action="%target%">'
                    +   '<input name="method" type="hidden" '
                    +         'value="%method%" />'
                    +  '<div class="fields">'
                    +   '%params%'
                    +  '</div>'
                    +  '<div class="buttons">'
                    +   '<button>POST</button>'
                    +   '<button>GET</button>'
                    +   '<br />'
        <?php if ($this->jsonRpc === true) { ?>
                    +   '<label for="jsonRpc">jsonRpc</label>'
                    +   ' <input type="checkbox" id="jsonRpc" />'
        <?php } ?>
                    +  '</div>'
                    +  '</form>'
                    + '</li>';
        var pTmpl   =   '<div class="field line %required%">'
                    +    '<label for="%name%" '
                    +           'class="unit">%name%</label>'
                    +    '<input name="%name%" '
                    +           'class="unit lastUnit" '
                    +           'type="%type%" '
                    +          'value="%default%" />'
                    +   '</div>';

        var nParams = info.parameters.length;
        var params  = (nParams > 0
                        ? ''
                        : '&nbsp;<br />&nbsp;<br />');

        for (var idex = 0; idex < nParams; idex++)
        {
            var param   = info.parameters[idex];

            params += pTmpl.replace(/%required%/g,
                                    (param.optional === true
                                        ? 'optional'
                                        : 'required'))
                           .replace(/%name%/g, param.name)
                           .replace(/%type%/g, 'text')
                           .replace(/%default%/g,
                                        (param['default'] !== undefined
                                            ? param['default']
                                            : ''));
        }

        var li      = lTmpl.replace(/%target%/g,       target)
                           .replace(/%method%/g,       name)
                           .replace(/%method_label%/g,
                                    (parts[1] !== undefined
                                        ? parts[1]
                                        : parts[0]) )
                           .replace(/%transport%/g,    info.transport)
                           .replace(/%params%/g,       params);

        return li;
    }

    /** @brief  Bind events for new service forms found in $services.
     */
    function bindForms()
    {
        var $forms      = $services.find('form');
        var $buttons    = $forms.find('button');

        $forms.bind('submit.rpc',  rpc_submit);

        $buttons.bind('click.rpc', function(e) {
            e.preventDefault();

            var $button = $(this);
            var $form   = $button.parents('form:first');

            // Use the button text as the new form method.
            $form.attr('method', $button.text());

            $form.submit();
        });

        $serviceUl.find('h4').click(function() {
            var $ctl    = $(this);
            var $body   = $ctl.next();
            var $toggle = $ctl.find('span:first');

            if ($body.is(':hidden'))
            {
                $toggle.removeClass(indicator['closed'])
                       .addClass(   indicator['opened']);
            }
            else
            {
                $toggle.removeClass(indicator['opened'])
                       .addClass(   indicator['closed']);
            }

            $body.slideToggle('fast');
            return false;
        });
    }

    /** @brief  Given a service map, generate forms for each service.
     *  @param  map         The service map is of the form:
     *                          { envelope:     'JSON-RPC-2.0',
     *                            transport:    'POST',
     *                            contentType:  'application/json',
     *                            SMDVersion:   '2.0',
     *                            target:       '/api/v2/json-rpc',
     *                            services:     [
     *                              % name %: % service Description %,
     *                              ...
     *                            ]
     *                          }
     *  @param  group       If provided, group ALL services under a single
     *                      section with this name;
     */
    function buildForms(map, group)
    {
        var $section    = null;
        var lastSection = null;
        $.each(map.services, function(name, info) {
            var parts   = (group
                            ? [ group ]
                            : name.split(/[\._]/) );

            if (lastSection !== parts[0])
            {
                var li   = '<li>'
                         +   '<h4>'
                         +    "<span class='control'></span>"
                         +    '<a href="#">'+ parts[0] +'</a>'
                         +   '</h4>'
                         + '</li>';
                var sect = '<ul></ul>';
                var $li  = $(li);
                $section = $(sect);
                
                $li.addClass( 'ui-accordion-li-fix' )
                        .find('h4')
                            .addClass(  'ui-accordion-header '
                                      + 'ui-state-default '
                                      + 'ui-helper-reset '
                                      + 'ui-corner-top' )
                        .find('span.control')
                            .addClass(  'ui-icon '
                                      + 'ui-icon-triangle-1-e' );

                $section.addClass(      'service '
                                      + parts[0] +' '
                                      + 'ui-accordion-content '
                                      + 'ui-helper-reset '
                                      + 'ui-widget-content '
                                      + 'ui-corner-bottom' )
                         .hide();

                $serviceUl.append( $li.append($section) );

                lastSection = parts[0];
            }

            var form    = buildForm(name, info, map.target);

            $section.append(form);
        });

        $serviceUl.find('input').input({hideLabel:false});
        $serviceUl.find('button').button();
        bindForms();
    }

    // Fetch the service description and then build forms...
    var indicator   = {
        opened: 'ui-icon-triangle-1-s',
        closed: 'ui-icon-triangle-1-e'
    };

    /** @brief  When the final page is ready, $.smd() can be used to retrieve
     *          the service map (if it hasn't been directly included) and
     *          rendered into a two column page with services and results.
     *  @param  url         The base URL for the service from which we can
     *                      retrieve the service description
     *                      (via %url%?serviceDescription=1);
     *  @param  group       If provided, group ALL services under a single
     *                      section with this name.  Otherwise, services will
     *                      be grouped based upon the first portion of the
     *                      method name (assuming methods are of the form
     *                      'group[._]call');
     */
    $.smd = function(url, group) {
        $services.mask();
        if (serviceMap !== null)
        {
            buildForms(serviceMap, group);
            $services.unmask();
        }
        else
        {
            $.ajax({
                type:     'GET',
                url:      url +'?serviceDescription=1',
                dataType: 'json',
                success: function(data, txtStatus, req) {
                    buildForms(data, group);
                },
                error: function(req, txtStatus, e) {
                    $result.html(  '<h3 class="error">'
                                 +  'Cannot retrieve service map'
                                 + '</h3>');
                },
                complete: function() {
                    $services.unmask();
                }
            });
        }
    }

    $(document).ready(function() {
        $services   = $('.services');
        $results    = $('.results');
        $clear      = $results.find('a.clear');
        $result     = $results.find('.result');
        $serviceUl  = $('<ul />').addClass(  'ui-accordion '
                                           + 'ui-widget '
                                           + 'ui-helper-reset '
                                           + 'ui-accordion-icons' );
        $services.append($serviceUl);

        $clear.click(function(e) {
            e.preventDefault();

            $result.empty();
        });

        $result.click(function() {
            if (useJsDump === -1)
            {
                // jsDump has been DISABLED
                return;
            }

            // Clicking on the result area will toggle the formatting.
            useJsDump = (useJsDump === false ? true : false);

            var $pre    = $result.find('pre');
            $pre.html( data2html() );
        });

        $.smd( '<?= $this->server->getTarget() ?>'<?= (empty($this->group)
                                                ? ''
                                                : ", '". $this->group ."'") ?>);

    });
}(jQuery));
<?php
$jQuery->javascriptCaptureEnd();


?>
<div class='columnHeader'>
 <div class='context-bg connexions_sprites settings_bg 
             ui-corner-left ui-corner-tr'>&nbsp;</div>
 <p><?= $this->title ?></p>
 <?php
    if (is_array($this->seeAlso))
    {
        foreach ($this->seeAlso as $ref)
        {
            ?><p class='seeAlso'>see also <?= $ref ?></p><?php
        }
    }
 ?>
</div>
<div class='pane line'>
 <div class='services unit size1of3'>
  <h3>Services
        <a class='serviceMap'
            href='<?= $this->server->getTarget() ?>?serviceDescription=1'>SMD</a></h3>
 </div>
 <div class='results unit size2of3 lastUnit'>
  <h3>Results <a class='clear'>clear</a></h3>
  <div class='result'></div>
 </div>
</div>

