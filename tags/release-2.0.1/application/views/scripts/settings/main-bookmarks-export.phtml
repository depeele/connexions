<?php
/** @file
 *
 *  Render the Bookmarks Export section.
 *
 *  Incoming members:
 *      baseUrl         The base url for the main controller of this page
 *                      without any differentiating parameters
 *                      (e.g. tag restrictions);
 *      url             The full url for the main controller of this page
 *                      with differentiating parameters;
 *      viewer          The Model_User instance representing the current
 *                      viewer;
 *
 *      section         The settings section;
 *      setting         The specific setting;
 *      sections        An array of avaialble sections and commands of the
 *                      form:
 *                          {section: {
 *                              'title':    section title,
 *                              'script':   section render script
 *                              'settings': [
 *                                  {'title':   command title,
 *                                   'script':  command render script},
 *                                  ...
 *                              ],
 *                           },
 *                           ...
 *                          }
 *
 *      completionCookie    An array of 'name' and 'path' providing information
 *                          about the completion cookie to be used to
 *                          communicate upload completion;
 */

/*
Connexions::log("view/scripts/settings/main-bookmarks-export: "
                .   "completionCookie[ %s ]",
                Connexions::varExport($this->completionCookie));
// */

// Force the removal of any current cookie
$expires = time() - 3600;   // Minus 1 hour
setcookie( $this->completionCookie['name'],
           '',
           $expires,
           $this->completionCookie['path'] );

$jQuery = $this->jQuery();
$jQuery->addOnLoad('$.bookmark_export_onLoad();')
       ->javascriptCaptureStart();
?>
(function($) {
    var cookieOptions       = {
        path:   '<?= $this->completionCookie['path'] ?>'
    };
    var $form               = null;
    var $submit             = null;
    var completionCookie    = '<?= $this->completionCookie['name'] ?>';
    var ccRE                = new RegExp('&'+ completionCookie +'=.*$');
    var token               = null;
    var cycles              = 0;
    var maxCycles           = 30;   // In 1 second intervals

    $.bookmark_export_onLoad = function() {
        var $export = $('#bookmark-export');

        $form   = $export.find('form:first');
        $submit = $form.find('input[type=submit]');
        token   = new Date().getTime();

        var url = $form.attr('action');
        url     = url.replace(ccRE, '&'+ completionCookie +'='+ token);
        $form.attr('action', url);

        // Ensure that any previous cookie is unset
        $.cookie( completionCookie, null, cookieOptions );
        
        $submit.button({priority:'primary', enabled:true});
        $form.submit(function(e) { 
            monitorExport();
        });
    };


    function finishExport(monitorTimer)
    {
        // Clear the interval timer
        window.clearInterval(monitorTimer);

        // Clear the completion cookie
        $.cookie( completionCookie, null, cookieOptions );

        // Unmask the form
        $form.unmask();

        /* Since we CANNOT effectively delete cookies that are set by the
         * server, do NOT directly re-enable the submit button (i.e. the above
         * clear doesn't actually remove the cookie), do NOT re-enable the
         * submit button.
         *  $submit.button('enable');
         *
         * Instead, rely on the server setting a short expiration for the
         * cookie.
         *
         * With that assumption, add an interval timer to monitor for cookie
         * expiration.  Once expired, re-enable the submit button.
         */
        var monitorTimer = window.setInterval(function() {
            var cookieValue = $.cookie( completionCookie );
            /*
            $.log("expiration monitor: "
                    + "cycles[ "+ cycles +" ], "
                    + completionCookie +"[ "+ cookieValue +" ]");
            // */

            cycles++;
            if ((! cookieValue) || (cycles > maxCycles))
            {
                $submit.button('enable');
                window.clearInterval(monitorTimer);
            }
        }, 1000);
    }

    function monitorExport()
    {
        // Disable the submit and mask the form
        $submit.button('disable');
        $form.mask();

        // Check for the 'exportCompleted' cookie
        cycles = 0;
        var monitorTimer = window.setInterval(function() {
            var cookieValue = $.cookie( completionCookie );
            /*
            $.log("completion monitor: "
                    + "cycles[ "+ cycles +" ], "
                    + "token[ "+ token +" ], "
                    + completionCookie +"[ "+ cookieValue +" ]");
            // */

            cycles++;
            if ((cookieValue == token) || (cycles > maxCycles))
            {
                finishExport( monitorTimer );
            }
        }, 1000);
    }

}(jQuery));
<?php
$jQuery->javascriptCaptureEnd();

/* Set 'streaming=true' below so the post-bookmarks-export.pthml view script
 * will be rendered directly with no layout.
 */
?>
<div id='bookmark-export'><!-- bookmark-export { -->
 <form  action='?format=partial&part=post-bookmarks-export&<?= $this->completionCookie['name'] ?>='
        method='POST'
       enctype="multipart/form-data"><!-- form { -->
  <div class='section'><!-- section { -->
   <h3>Export / Download your Connexions Bookmarks</h3>
   <p id='bookmark-export-browser-instructions'>
     This tool generates an HTML version of your bookmarks that is
     understandable by most browsers.  You can then save the generated page as
     HTML and import it into your browser, or any other application that
     accepts bookmarks in a standard format.
   </p>
   <div class='field'><!-- field { -->
    <input type='checkbox'
             id='includeTags'
           name='includeTags' checked='true' /><label for='includeTags'>Include tags?</label>
   </div><!-- field } -->

   <div class='field'><!-- field { -->
    <input type='checkbox'
             id='includeMeta'
           name='includeMeta' checked='true' /><label for='includeMeta'>Include notes, privacy, favorite, and rating information?</label>
   </div><!-- field } -->
  </div><!-- section } -->
  <div class='buttons'><!-- buttons { -->
   <!-- button name='submit'>Export</button -->
   <input type='submit' name='submit' value='Export' />
  </div><!-- buttons } -->
 </form><!-- form } -->

 <div class='results-section section' style='display:none'>
  <h3>Export Results:</h3>
  <!-- Target for form submission / bookmark file upload / export results -->
  <iframe id='bookmark-export-results'
        name='bookmark-export-results'
         src='about:blank'></iframe>
 </div>
</div><!-- bookmark-export } -->
