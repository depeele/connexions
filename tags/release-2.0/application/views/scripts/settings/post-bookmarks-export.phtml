<?php
/** @file
 *
 *  This is used for the final rendering of an export.
 *
 *  The incoming view parameters should be:
 *      bookmarks   The bookmarks to export.
 *      includeTags Should tags be included?
 *      includeMeta Should notes, privacy, favorite and rating information be
 *                  included?
 *
 *      completionCookie    An array of information about the completion cookie
 *                          to be used to communicate upload completion:
 *                              name    - the cookie name
 *                              path    - the cookie path
 *                              value   - the value to set upon completion
 *                                        (randomly generated by the browser);
 */

/* Assume we can process 60 bookmarks per second.
 *  We should actually be able to do double that, but if we under-estimate, the
 *  cookie will expire BEFORE the client-side script (polling every 1 second)
 *  sees it.
 */
$nBookmarks         = count($this->bookmarks);
$bookmarksPerSecond = 60;

/*
Connexions::log("view/scripts/settings/post-bookmarks-export: "
                .   "completionCookie[ %s ], %s bookmarks, allow %s seconds",
                Connexions::varExport($this->completionCookie),
                $nBookmarks, ceil($nBookmarks / $bookmarksPerSecond));
// */

$expires            = time() + ceil($nBookmarks / $bookmarksPerSecond);
setcookie( $this->completionCookie['name'],
           $this->completionCookie['value'],
           $expires,
           $this->completionCookie['path'] );

header('Content-type: text/html');
header('Content-disposition: attachment; filename=bookmarks.html');
?>
<!DOCTYPE NETSCAPE-Bookmark-file-1>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<!-- This is an automatically generated file.
     It will be read and overwritten.
     DO NOT EDIT! -->
<TITLE>Bookmarks</TITLE>
<H1>Bookmarks</H1>
<DL><p>
<?php

/*
$table = get_html_translation_table(HTML_ENTITIES, ENT_NOQUOTES, 'UTF-8');
Connexions::log("HTML Translation Table: %s", print_r( $table, true ));
// */

function safeStr($str)
{
    // Decode any existing entities and then (re)encode all entities.
    $int = html_entity_decode($str, ENT_NOQUOTES, 'UTF-8');
    $res = htmlentities($int, ENT_NOQUOTES, 'UTF-8', false);

    if (empty($res))
    {
        // Decode or Encode error
        Connexions::log("safeStr( %s ) == [ %s ] == [ %s ]", $str, $int, $res);
    }
    return $res;
}

foreach ($this->bookmarks as $bookmark)
{
    $desc  = '';
    $attrs = array(
        'HREF="'.     $bookmark->item->url .'"',
        'ADD_DATE="'. Connexions::date2time($bookmark->taggedOn) .'"',
    );

    if ($this->includeMeta)
    {
        /* See SettingsController::_parseBookmarkInfo() for the recognized
         * meta-data fields.
         */
        array_push($attrs, 'PRIVATE="'. ($bookmark->isPrivate  ? '1':'0').'"');
        array_push($attrs, 'FAVORITE="'.($bookmark->isFavorite ? '1':'0').'"');
        array_push($attrs, 'RATING="'.  $bookmark->rating                .'"');

        if (! empty($bookmark->description))
        {
            $desc = '    <DD>'
                  .         safeStr($bookmark->description)
                  . "\n";
        }
    }

    if ($this->includeTags)
    {
        $tags = preg_replace('/,\s+/', ',', $bookmark->tags->__toString());

        array_push($attrs, 'TAGS="'.    $tags .'"');
    }

    echo '  <DT><A '. implode(' ', $attrs) .'>',
                  safeStr($bookmark->name),
                "</A>\n",
                $desc;
}

?>
</DL><p><!-- Generated <?= date('Y-m-d H:i:sO') ?> -->
